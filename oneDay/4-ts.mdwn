一、搭建ts学习环境
# 安装最新版ts
npm i -g typescript
# 安装ts-node
npm i -g ts-node
# 创建一个tsconfig.json文件
tsc --init
# 然后新建index.ts，输入代码，执行
ts-node index.ts

二、 基础数据类型
js的八种内置类型：
let str: string = "jimmy";
let num: number = 24;
let bool: boolean = false;
let u: undefined = undefined;
let n: null = null;
let obj: object = {x: 1};
let big: bigint = 100n;
let sym: symbol = Symbol("me"); 

1. undefined和null(还有三中的never)是所有类型的子类型，所以可以赋值给其他类型的变量：
   let str: string = '666';
   str = null
   str = undefined

   在tsconfig.json指定了"strictNullChecks": true
       null和undefined就只能赋值给void和它们各自的类型

2. number bigint
都是表示数字，但是不兼容
    let big: bigint = 100n;
    let num: number = 6;
    big = num; // 抛出错误

三、 其他类型
1. Array
let arr:string[] = ["1","2"];
let arr2:Array<string> = ["1","2"]；

存储联合类型，这个数组中将来既可以存储数值类型的数据, 也可以存储字符串类型的数据
let arr:(number | string)[];
arr3 = [1, 'b', 2, 'c'];

也可以将成员指定类型：
// interface是接口
interface Arrobj{   
    name:string, 
    age:number
}
let arr3:Arrobj[]=[{name:'jimmy', age:22}]

2. 函数
函数声明：
function sum(x: number, y: number): number {  
    return x + y;
}

函数表达式：
let mySum: (x: number, y: number) => number
    = function (x: number, y: number): number {   
        return x + y;
    };

    等号左边进行类型限制

用接口定义函数类型：
interface SearchFunc{ 
  (source: string, subString: string): boolean;
}

* 可选参数
```js
// 可选参数lastname， 注意该参数后面不能再出现必需参数
function buildName(firstName: string, lastName?: string) { 
    if (lastName) {      
        return firstName + ' ' + lastName;   
    } else {     
        return firstName;   
    }
}
let tomcat = buildName('Tom', 'Cat');
let tom = buildName('Tom');
```

* 参数默认值
lastName: string = 'Cat'

* 剩余参数
function func(arr1: any[], ...items: any[]){
    ...
    items.forEach(item => {
        arr1.push(item)
    })
}

* 函数重载
由于 JavaScript 是一个动态语言，我们通常会使用不同类型的参数来调用同一个函数，该函数会根据不同的参数而返回不同的类型的调用结果
function add(x,y) {
    return x + y;
}
当ts配置开启noImplicitAny，上面会报错，隐性默认any，要设置一个类型。
    假如要设置联合类型，可以定义一个联合类型
        type CC = string | number;
        function add(a: CC, b: CC) {
            if (typeof a === 'string' || typeof b === 'string') {    
                return a.toString() + b.toString();   
            }  
            return a + b;
        }

const res = add('xx' + 'yy');
res.split('');
<!-- 此时会被认为res默认字符串， 而是报错number类型没有split！！！ -->

函数重载或方法重载：是使用相同名称和不同参数数量或类型创建多个方法的一种能力。

所以解决方案：为同一个函数提供多个函数类型定义来进行函数重载，编译器会根据这个列表去处理函数的调用。
```js
type Types = number | string
function add(a:number,b:number):number;
function add(a: string, b: string): string;
function add(a: string, b: number): string;
function add(a: number, b: string): string;
function add(a:Types, b:Types) {  
  if (typeof a === 'string' || typeof b === 'string') {  
    return a.toString() + b.toString(); 
  }  
  return a + b;
}
const result = add('Semlinker', ' Kakuqo');
result.split(' '); // 这就不会报number错误信息了
```

3. Tuple 元组（ts特有）
（1）定长定类
数组的成员一般是一种类型；
元组的成员可以是不同类型 —— 可以限制数组元素的个数和类型

let x: [string, number] // 个数必须2个，依次类型还得string，number

元组类型只能表示一个已知数量和类型的数组！
    不确定的时候，用any[]

（2）解构赋值
元组一样可以通过下标访问；也可解构赋值：
let employee: [number, string] = [1, "Semlinker"];
let [id, username] = employee;
console.log(`id: ${id}`);
console.log(`username: ${username}`);

注意： 左边解构变量个数不能超过元组成员个数

（3）可选参数
let optionalTuple: [string, boolean?];
optionalTuple = ["Kakuqo"];

（4）剩余元素
元组类型里最后一个元素可以是剩余元素，形式为 ...X，这里 X 是数组类型。剩余元素代表元组类型是开放的，可以有零个或多个额外的元素。 例如，[number, ...string[]] 表示带有一个 number 元素和任意数量string 类型元素的元组类型。

（5）只读的元组类型
const point: readonly [number, number] = [10, 20];
使用 readonly 关键字修饰元组类型之后，任何企图修改元组中元素的操作都会抛出异常

4. void
表示没有任何类型，和其他类型是平等关系，不能直接赋值

js中方法没有返回值的时候，实际是返回undefined类型，在ts会报错，需要定义成void类型
function fun(): undefined {  
  console.log("this is TypeScript");
};
fun(); // Error

5. never
表示的是那些永不存在的值的类型

值会永不存在的两种情况：
（1）如果一个函数执行时抛出了异常，那么这个函数永远不存在返回值（因为抛出异常会直接中断程序运行，这使得程序运行不到返回值那一步，即具有不可达的终点，也就永不存在返回了）；
（2）函数中执行无限循环的代码（死循环），使得程序永远无法运行到函数返回值那一步，永不存在返回。
```js
// 异常
function err(msg: string): never { // OK 
  throw new Error(msg); 
}

// 死循环
function loopForever(): never { // OK  
  while (true) {};
}
```
never类型同null和undefined一样，也是任何类型的子类型，也可以赋值给任何类型。

没有类型：是never的子类型或可以赋值给never类型（除了never本身之外），即使any也不可以赋值给never
```js
let ne: never;
let nev: never;
let an: any;

ne = 123; // Error
ne = nev; // OK
ne = an; // Error
ne = (() => { throw new Error("异常"); })(); // OK
ne = (() => { while(true) {} })(); // OK
```

使用到的场景：
```js
type Foo = string | number;

function controlFlowAnalysisWithNever(foo: Foo) {
  if (typeof foo === "string") {  
    // 这里 foo 被收窄为 string 类型 
  } else if (typeof foo === "number") { 
    // 这里 foo 被收窄为 number 类型 
  } else {   
    // foo 在这里是 never  
    const check: never = foo; 
  }
}
```
在 else 分支里面，我们把收窄为 never 的 foo 赋值给一个显示声明的 never 变量。如果一切逻辑正确，那么这里应该能够编译通过。但是假如后来修改了 Foo 的类型，加了boolean，使用 never 避免出现新增了联合类型没有对应的实现，目的就是写出类型绝对安全的代码。

6. any
在 TypeScript 中，任何类型都可以被归为 any 类型。这让 any 类型成为了类型系统的顶级类型.

如果是一个普通类型，在赋值过程中改变类型是不被允许的；但如果是 any 类型，则允许被赋值为任意类型。变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型。

在any上访问任何属性都是允许的,也允许调用任何方法.

7. unknown
any太宽松，无法让ts真正起作用。为了解决 any 带来的问题，TypeScript 3.0 引入了 unknown 类型。

unknown与any一样，所有类型都可以分配给unknown。

* unknown与any的最大区别是：任何类型的值可以赋值给any，同时any类型的值也可以赋值给任何类型。任何类型的值都可以赋值给unknown，但它只能赋值给unknown和any.

8. 对象类型、原始类型
Number String Boolean Symbol
let num: number;
let Num: Number;
Num = num  // 一切皆对象
num = Num  // 报错

* object、Object 和 {}
object（首字母小写，以下称“小 object”）、Object（首字母大写，以下称“大 Object”）和 {}（以下称“空对象”）
小 object 代表的是所有非原始类型，也就是说我们不能把 number、string、boolean、symbol等 原始类型赋值给 object。在严格模式下，null 和 undefined 类型也不能赋给 object。
大Object 代表所有拥有 toString、hasOwnProperty 方法的类型，所以所有原始类型、非原始类型都可以赋给 Object。同样，在严格模式下，null 和 undefined 类型也不能赋给 Object。

大 Object 包含原始类型，小 object 仅包含非原始类型
注意：尽管官方文档说可以使用小 object 代替大 Object，但是我们仍要明白大 Object 并不完全等价于小 object。‘

{}空对象类型和大 Object 一样，也是表示原始类型和非原始类型的集合，并且在严格模式下，null 和 undefined 也不能赋给 {}

综上结论：{}、大 Object 是比小 object 更宽泛的类型（least specific），{} 和大 Object 可以互相代替，用来表示原始类型（null、undefined 除外）和非原始类型；而小 object 则表示非原始类型。

四、类型

1. 类型推断
在很多情况下，TypeScript 会根据上下文环境自动推断出变量的类型，无须我们再写明类型注解。
把 TypeScript 这种基于赋值表达式推断类型的能力称之为  类型推断 ！

* 如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 any 类型而完全不被类型检查。

2. 类型断言
通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”，TypeScript 类型检测无法做到绝对智能。
它没有运行时的影响，只是在编译阶段起作用

const greaterThan2: number = arrayNumber.find(num => num > 2); // 提示 ts(2322)
在 TypeScript 看来，greaterThan2 的类型既可能是数字，也可能是 undefined，所以上面的示例中提示了一个 ts(2322) 错误，此时我们不能把类型 undefined 分配给类型 number。

类型断言（类似仅作用在类型层面的强制类型转换）告诉 TypeScript 按照我们的方式做类型检查：
const greaterThan2: number = arrayNumber.find(num => num > 2) as number;
    使用 as 语法做类型断言

```js
// 尖括号 语法: 尖括号格式会与react中JSX产生语法冲突
let someValue: any = "this is a string";
let strLength: number = (<string>someValue).length;

// as 语法 推荐
let someValue: any = "this is a string";
let strLength: number = (someValue as string).length;
```

3. 非空断言
在上下文中当类型检查器无法断定类型时，一个新的后缀表达式操作符 ! 可以用于断言操作对象是非 null 和非 undefined 类型。

    具体而言，x! 将从 x 值域中排除 null 和 undefined

let mayNullOrUndefinedOrString: null | undefined | string;
mayNullOrUndefinedOrString!.toString(); // ok
mayNullOrUndefinedOrString.toString(); // ts(2531)

4. 确定赋值断言
let x: number;
initialize();

// Variable 'x' is used before being assigned.(2454)
console.log(2 * x); // Error
function initialize() { 
  x = 10;
}

<!-- 说变量 x 在赋值前被使用了，要解决该问题，我们可以使用确定赋值断言： -->

在实例属性和变量声明后面放置一个 ! 号，从而告诉 TypeScript 该属性会被明确地赋值
let x!: number;
initialize();
console.log(2 * x); // Ok

function initialize() { 
  x = 10;
}
<!-- let x!: number; 确定赋值断言，TypeScript 编译器就会知道该属性会被明确地赋值。 -->

5. 字面量类型
在 TypeScript 中，字面量不仅可以表示值，还可以表示类型，即所谓的字面量类型。

TypeScript 支持 3 种字面量类型：字符串字面量类型、数字字面量类型、布尔字面量类型
```js
{ 
  let specifiedStr: 'this is string' = 'this is string';  // string类型的子类型
  let specifiedNum: 1 = 1; 
  let specifiedBoolean: true = true;
}
```
字符串字面量类型
应用场景：把多个字面量类型组合成一个联合类型，用来描述拥有明确成员的实用的集合。

interface Config {   
    size: 'small' | 'big';  
    isEnable:  true | false;   
    margin: 0 | 2 | 4;
}
限定了 size 属性为字符串字面量类型 'small' | 'big'，isEnable 属性为布尔字面量类型 true | false（布尔字面量只包含 true 和 false，true | false 的组合跟直接使用 boolean 没有区别），margin 属性为数字字面量类型 0 | 2 | 4

6. 类型拓宽
let str = 'this is string'; // 类型是 string  
let、形参且未显式声明类型注解的条件，所以变量、形参的类型拓宽为 string（形参类型确切地讲是 string | undefined）

const specifiedStr = 'this is string'; // 类型是 'this is string' 
let str2 = specifiedStr; // 类型是 'string' 
常量不可变更，类型没有拓宽，所以 specifiedStr 的类型是 'this is string' 字面量类型； str2即便使用 let 定义，类型是 'this is string'

```js
{ 
  let x = null; // 类型拓宽成 any  
  let y = undefined; // 类型拓宽成 any 
  
  /** -----分界线------- */ 
  const z = null; // 类型是 null 
  
  /** -----分界线------- */ 
  let anyFun = (param = null) => param; // 形参类型是 null 
  let z2 = z; // 类型是 null 
  let x2 = x; // 类型是 null 
  let y2 = y; // 类型是 undefined
}
```
在严格模式下，一些比较老的版本中（2.0）null 和 undefined 并不会被拓宽成“any”。

7. 联合类型
name: string | undefined
let num: 1 | 2 = 1;
type EventNames = 'click' | 'scroll' | 'mousemove';

* 类型别名：
  给一个类型起个新名字。类型别名常用于联合类型。
  仅仅是给类型取了一个新的名字，并不是创建了一个新的类型。

8. 交叉类型
将多个类型合并为一个类型。把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性，使用&定义交叉类型。

{ 
  type Useless = string & number;
}

仅仅把原始类型、字面量类型、函数类型等原子类型合并成交叉类型，是没有任何用处的，因为任何类型都不能满足同时属于多种原子类型！

真正的用武之地就是将多个接口类型合并成一个类型，从而实现等同接口继承的效果，也就是所谓的合并接口类型：
  type IntersectionType = { id: number; name: string; } & { age: number }; 
  const mixed: IntersectionType = {  
    id: 1,   
    name: 'name',  
    age: 18
  }
通过交叉类型，使得 IntersectionType 同时拥有了 id、name、age 所有属性，这里我们可以试着将合并接口类型理解为求并集。
interface A {
  x:{d:true},
}
interface B { 
  x:{e:string},
}
interface C {  
  x:{f:number},
}
type ABC = A & B & C
let abc:ABC = { 
  x:{  
    d:true,  
    e:'',   
    f:666  
  }
}
在混入多个类型时，若存在相同的成员，且成员类型为非基本数据类型，那么是可以成功合并


五、 接口
1. 接口
使用接口（Interfaces）来定义对象的类型。
在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。

除了可用于[对类的一部分行为进行抽象]以外，也常用于对「对象的形状（Shape）」进行描述。
interface Person {  
    name: string;   
    age: number;
}
let tom: Person = {  
    name: 'Tom',  
    age: 25
};
约束了 tom 的形状必须和接口 Person 一致。

* 接口一般首字母大写。

* 若定义的变量tom 比接口Person 少了/多了一些属性都是不允许的！！！
  赋值的时候，变量的形状必须和接口的形状保持一致。

interface Person { 
  readonly name: string; // 只读属性：只能在对象刚刚创建的时候修改其值
  age?: number; // 可选属性
}

TypeScript 还提供了 ReadonlyArray<T> 类型，它与 Array<T> 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改
let a: number[] = [1, 2, 3, 4];
let ro: ReadonlyArray<number> = a;
ro[0] = 12; // error!
ro.push(5); // error!
ro.length = 100; // error!
a = ro; // error!

2. 任意属性
一个接口中除了包含必选和可选属性之外，还允许有其他的任意属性，这时我们可以使用 索引签名 的形式来满足上述要求：
interface Person {  
    name: string;   
    age?: number;   
    [propName: string]: any;
}

let tom: Person = {   
    name: 'Tom',  
    gender: 'male'
};

* 一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集
interface Person {  
    name: string;   
    age?: number;   
    [propName: string]: string;
}

let tom: Person = {  
    name: 'Tom',  
    age: 25,   
    gender: 'male'
};
上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了

* 一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型
interface Person {  
    name: string;  
    age?: number; // 这里真实的类型应该为：number | undefined 
    [propName: string]: string | number | undefined;
}

let tom: Person = {  
    name: 'Tom',   
    age: 25,   
    gender: 'male'
};

3. 鸭式辨型法
鸭式辨型法就是像鸭子一样走路并且嘎嘎叫的就叫鸭子，即具有鸭子特征的认为它就是鸭子，也就是通过制定规则来判定对象是否实现这个接口。
```js
interface LabeledValue { 
  label: string;
}
function printLabel(labeledObj: LabeledValue) {  
  console.log(labeledObj.label);
}

printLabel({ size: 10, label: "Size 10 Object" }); // Error

let myObj = { size: 10, label: "Size 10 Object" };
printLabel(myObj); // OK
```
在参数里写对象就相当于是直接给labeledObj赋值，这个对象有严格的类型定义，所以不能多参或少参;
在外面将该对象用另一个变量myObj接收，myObj不会经过额外属性检查，但会根据类型推论为let myObj: { size: number; label: string } = { size: 10, label: "Size 10 Object" };，然后将这个myObj再赋值给labeledObj，此时根据类型的兼容性，两种类型对象，参照鸭式辨型法，因为都具有label属性，所以被认定为两个相同，故而可以用此法来绕开多余的类型检查。

* 所以，绕开额外属性检查的方式：
(1) 鸭式辨型法
(2) 类型断言
  就等同于你在告诉程序，你很清楚自己在做什么，此时程序自然就不会再进行额外的属性检查
  ```js
  interface Props {  
    name: string; 
    age: number;  
    money?: number;
  }

  let p: Props = { 
    name: "兔神", 
    age: 25, 
    money: -100000, 
    girl: false
  } as Props; // OK
  ```

(3) 索引签名
  ```js
  interface Props { 
    name: string;  
    age: number;  
    money?: number; 
    [key: string]: any;
  }

  let p: Props = { 
    name: "兔神", 
    age: 25, 
    money: -100000, 
    girl: false
  }; // OK
  ```

4. 接口和类型别名的区别
接口的作用就是为这些类型命名和为你的代码或第三方代码定义数据模型。

type(类型别名)会给一个类型起个新名字。type 有时和 interface 很像，但是可以作用于原始值（基本类型），联合类型，元组以及其它任何你需要手写的类型。起别名不会新建一个类型 - 它创建了一个新 名字来引用那个类型。给基本类型起别名通常没什么用，尽管可以做为文档的一种形式使用。

5. Objects / Functions
两者都可以用来描述对象或函数的类型，但是语法不同。
* interface：
interface Point { 
  x: number; 
  y: number;
}

interface SetPoint { 
  (x: number, y: number): void;
}

* Type alias：
type Point = { 
  x: number; 
  y: number;
};

type SetPoint = (x: number, y: number) => void;

- 与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。
// primitive
type Name = string;

// object
type PartialPointX = { x: number; };
type PartialPointY = { y: number; };

// union
type PartialPoint = PartialPointX | PartialPointY;

// tuple
type Data = [number, string];

// dom
let div = document.createElement('div');
type B = typeof div;

- 接口可以定义多次,类型别名不可以
  接口可以定义多次，会被自动合并为单个接口。
  interface Point { x: number; }
  interface Point { y: number; }
  const point: Point = { x: 1, y: 2 };

- 接口扩展接口
interface PointX {   
    x: number
}

interface Point extends PointX {  
    y: number
}
- 类型别名扩展类型别名
type PointX = {   
    x: number
}

type Point = PointX & {  
    y: number
}
- 接口可以扩展类型别名
  接口的扩展就是继承，通过 extends 来实现
type PointX = {  
    x: number
}
interface Point extends PointX {  
    y: number
}

- 类型别名也可以扩展接口
  类型别名的扩展就是交叉类型，通过 & 来实现
interface PointX { 
    x: number
}
type Point = PointX & {  
    y: number
}

六、泛型
1. 什么是泛型
写一个函数identity，入参是任何类型，返回出参原样。
type idBoolean = (arg: boolean) => boolean;
type idNumber = (arg: number) => number;
type idString = (arg: string) => string;
...
这太麻烦了

当然，可以用any，没有意义。

T 是一个抽象类型，只有在调用的时候才确定它的值
function identity<T>(arg: T): T { 
  return arg;
}
T 代表 Type，在定义泛型时通常用作第一个类型变量名称。但实际上 T 可以用任何有效名称代替
第一个T：传递类型
第二个T：链式传递给参数类型
第三个T：链式传递给返回类型
```js
function identity <T, U>(value: T, message: U) : T {  
  console.log(message);  
  return value;
}
console.log(identity<Number, string>(68, "Semlinker"));
```

2. 泛型约束
使用 extends 关键字可以做到这一点。简单来说就是你定义一个类型，然后让 T 实现这个接口即可
interface Sizeable {
  size: number;
}
function trace<T extends Sizeable>(arg: T): T {
  console.log(arg.size);  
  return arg;
}

3. 泛型工具类型
（1）typeof
interface Person { 
  name: string; 
  age: number;
}
const sem: Person = { name: "semlinker", age: 30 };
type Sem = typeof sem; // type Sem = Person

嵌套对象也可以
const Message = {  
    name: "jimmy",   
    age: 18,   
    address: {   
      province: '四川',   
      city: '成都'     
    }
}
type message = typeof Message;

获取函数对象的类型
function toArray(x: number): Array<number> {
  return [x];
}
type Func = typeof toArray; // -> (x: number) => number[]

（2）keyof
keyof 操作符是在 TypeScript 2.1 版本引入的，该操作符可以用于获取某种类型的所有键，其返回类型是联合类型。

interface Person { 
  name: string; 
  age: number;
}

type K1 = keyof Person; // "name" | "age"
type K2 = keyof Person[]; // "length" | "toString" | "pop" | "push" | "concat" | "join" 
type K3 = keyof { [x: string]: Person };  // string | number

* 在 TypeScript 中支持两种索引签名，数字索引和字符串索引：
interface StringArray { 
  // 字符串索引 -> keyof StringArray => string | number 
  [index: string]: string;
}

interface StringArray1 { 
  // 数字索引 -> keyof StringArray1 => number 
  [index: number]: string;
}
为了同时支持两种索引类型，就得要求数字索引的返回值必须是字符串索引返回值的子类。其中的原因就是当使用数值索引时，JavaScript 在执行索引操作时，会先把数值索引先转换为字符串索引。所以 keyof { [x: string]: Person } 的结果会返回 string | number。

let K1: keyof boolean; // let K1: "valueOf"
let K2: keyof number; // let K2: "toString" | "toFixed" | "toExponential" | ...
let K3: keyof symbol; // let K1: "valueOf"

（3）in
用来遍历枚举类型
type Keys = "a" | "b" | "c"

type Obj =  { 
  [p in Keys]: any
} // -> { a: any, b: any, c: any }

（4）infer
在条件类型语句中，可以用 infer 声明一个类型变量并且对它进行使用
type ReturnType<T> = T extends ( 
  ...args: any[]
) => infer R ? R : any;
infer R 就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用。

（5）extends
有时候我们定义的泛型不想过于灵活或者说想继承某些类等，可以通过 extends 关键字添加泛型约束。
interface Lengthwise { 
  length: number;
}

function loggingIdentity<T extends Lengthwise>(arg: T): T { 
  console.log(arg.length); 
  return arg;
}
现在这个泛型函数被定义了约束，因此它不再是适用于任意类型：
loggingIdentity(3);  // Error, number doesn't have a .length property

loggingIdentity({length: 10, value: 3}); // 必须包含length属性

七、 类型
1. 索引类型
如要在对象中获取一些属性的值，然后建立对应的集合。
```js
let person = {   
    name: 'musion',  
    age: 35
}

function getValues(person: any, keys: string[]) {  
    return keys.map(key => person[key])
}

console.log(getValues(person, ['name', 'age'])) // ['musion', 35]
console.log(getValues(person, ['gender'])) // [undefined]
```
可以看到getValues(persion, ['gender'])打印出来的是[undefined]，但是ts编译器并没有给出报错信息，那么如何使用ts对这种模式进行类型约束呢？这里就要用到了索引类型,改造一下getValues函数，通过 索引类型查询和 索引访问 操作符：
```js
function getValues<T, K extends keyof T>(person: T, keys: K[]): T[K][] { 
  return keys.map(key => person[key]);
}

interface Person {   
    name: string;  
    age: number;
}

const person: Person = {   
    name: 'musion',   
    age: 35
}

getValues(person, ['name']) // ['musion']
getValues(person, ['gender']) // 报错：
// Argument of Type '"gender"[]' is not assignable to parameter of type '("name" | "age")[]'.
// Type "gender" is not assignable to type "name" | "age".
```
T[K]表示对象T的属性K所表示的类型，在上述例子中，T[K][] 表示变量T取属性K的值的数组
// 通过[]索引类型访问操作符, 我们就能得到某个索引的类型
class Person {  
    name:string;  
    age:number; 
}
type MyType = Person['name'];  //Person中name的类型为string type MyType = string
首先看泛型，这里有T和K两种类型，根据类型推断，第一个参数person就是person，类型会被推断为Person。而第二个数组参数的类型推断（K extends keyof T），keyof关键字可以获取T，也就是Person的所有属性名，即['name', 'age']。

2. 映射类型
根据旧的类型创建出新的类型, 我们称之为映射类型

interface TestInterface{  
    name:string,   
    age:number
}
* 把上面定义的接口里面的属性全部变成可选：
// 我们可以通过+/-来指定添加还是删除

type OptionalTestInterface<T> = { 
  [p in keyof T]+?:T[p]
}

type newTestInterface = OptionalTestInterface<TestInterface>
// type newTestInterface = {
//    name?:string,
//    age?:number
// }

* 再加上只读：
type OptionalTestInterface<T> = {
 +readonly [p in keyof T]+?:T[p]
}

type newTestInterface = OptionalTestInterface<TestInterface>
// type newTestInterface = {
//   readonly name?:string,
//   readonly age?:number
// }

TS内部已经给我们提供了现成的实现 Readonly / Partial,会面内置的工具类型会介绍.
（1）partial
Partial<T> 将类型的属性变成可选
type Partial<T> = { 
  [P in keyof T]?: T[P];
};
首先通过 keyof T 拿到 T 的所有属性名，然后使用 in 进行遍历，将值赋给 P，最后通过 T[P] 取得相应的属性值的类。中间的 ? 号，用于将所有属性变为可选。

例如：
```js
interface UserInfo {  
    id: string;  
    name: string;
}
// error：Property 'id' is missing in type '{ name: string; }' but required in type 'UserInfo'
const xiaoming: UserInfo = {   
    name: 'xiaoming'
}

// 使用  Partial<T>
type NewUserInfo = Partial<UserInfo>;
const xiaoming: NewUserInfo = {  
    name: 'xiaoming'
}

// 这个  NewUserInfo 就相当于
interface NewUserInfo {  
    id?: string;  
    name?: string;
}

// Partial<T> 有个局限性，就是只支持处理第一层的属性，如果我的接口定义是这样的
// 第二层以后就不会处理了，如果要处理多层，就可以自己实现
```

(2)DeepPartial
type DeepPartial<T> = {   
     // 如果是 object，则递归类型  
    [U in keyof T]?: T[U] extends object    
      ? DeepPartial<T[U]>   
      : T[U]
};

  type PartialedWindow = DeepPartial<T>; // 现在T上所有属性都变成了可选啦

(3)Required
将类型的属性变成必选
type Required<T> = {    
    [P in keyof T]-?: T[P] 
};
-? 是代表移除 ? 这个 modifier 的标识.除了可以应用于 ? 这个 modifiers ，还有应用在 readonly ，比如 Readonly<T> 这个类型
type Readonly<T> = { 
    readonly [p in keyof T]: T[p];
}

(4)Readonly
Readonly<T> 的作用是将某个类型所有属性变为只读属性，也就意味着这些属性不能被重新赋值。
interface Todo {
 title: string;
}

const todo: Readonly<Todo> = { 
 title: "Delete inactive users"
};

todo.title = "Hello"; // Error: cannot reassign a readonly property

(5) Pick
Pick 从某个类型中挑出一些属性出来
type Pick<T, K extends keyof T> = {  
    [P in K]: T[P];
};

interface Todo { 
  title: string; 
  description: string;
  completed: boolean;
}

type TodoPreview = Pick<Todo, "title" | "completed">;
  
const todo: TodoPreview = { 
  title: "Clean room", 
  completed: false,
};

NewUserInfo 中就只有个 name 的属性了。

(6) Record
Record<K extends keyof any, T> 的作用是将 K 中所有的属性的值转化为 T 类型。
type Record<K extends keyof any, T> = {   
    [P in K]: T;
};

interface PageInfo { 
  title: string;
}

type Page = "home" | "about" | "contact";

const x: Record<Page, PageInfo> = { 
  about: { title: "about" },  
  contact: { title: "contact" },  
  home: { title: "home" },
};

(7) ReturnType
用来得到一个函数的返回值类型
type ReturnType<T extends (...args: any[]) => any> = T extends ( 
  ...args: any[]
) => infer R  
  ? R 
  : any;
infer在这里用于提取函数类型的返回值类型。ReturnType<T> 只是将 infer R 从参数位置移动到返回值位置，因此此时 R 即是表示待推断的返回值类型。

type Func = (value: number) => string;
const foo: ReturnType<Func> = "1";
ReturnType获取到 Func 的返回值类型为 string，所以，foo 也就只能被赋值为字符串了。

(8) Exclude
Exclude<T, U> 的作用是将某个类型中属于另一个的类型移除掉。
type Exclude<T, U> = T extends U ? never : T;

如果 T 能赋值给 U 类型的话，那么就会返回 never 类型，否则返回 T 类型。最终实现的效果就是将 T 中某些属于 U 的类型移除掉。
type T0 = Exclude<"a" | "b" | "c", "a">; // "b" | "c"
type T1 = Exclude<"a" | "b" | "c", "a" | "b">; // "c"
type T2 = Exclude<string | number | (() => void), Function>; // string | number

(9) Extract
Extract<T, U> 的作用是从 T 中提取出 U。
type Extract<T, U> = T extends U ? T : never;

type T0 = Extract<"a" | "b" | "c", "a" | "f">; // "a"
type T1 = Extract<string | number | (() => void), Function>; // () =>void

(10) Omit
Omit<T, K extends keyof any> 的作用是使用 T 类型中除了 K 类型的所有属性，来构造一个新的类型。
type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;

interface Todo { 
  title: string; 
  description: string; 
  completed: boolean;
}

type TodoPreview = Omit<Todo, "description">;const todo: TodoPreview = {  
  title: "Clean room", 
  completed: false,
};

(11) NonNullable
NonNullable<T> 的作用是用来过滤类型中的 null 及 undefined 类型。
type NonNullable<T> = T extendsnull | undefined ? never : T;

type T0 = NonNullable<string | number | undefined>; // string | number
type T1 = NonNullable<string[] | null | undefined>; // string[]

(12) Parameters
Parameters<T> 的作用是用于获得函数的参数类型组成的元组类型。

type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any? P : never;

type A = Parameters<() =>void>; // []
type B = Parameters<typeofArray.isArray>; // [any]
type C = Parameters<typeofparseInt>; // [string, (number | undefined)?]
type D = Parameters<typeofMath.max>; // number[]

八、tsconfig.json
TypeScript 项目的配置文件。如果一个目录下存在一个 tsconfig.json 文件，那么往往意味着这个目录就是 TypeScript 项目的根目录。
tsconfig.json 包含 TypeScript 编译的相关配置，通过更改编译配置项，我们可以让 TypeScript 编译出 ES6、ES5、node 的代码。

> files - 设置要编译的文件的名称；
> include - 设置需要进行编译的文件，支持路径模式匹配；
> exclude - 设置无需进行编译的文件，支持路径模式匹配；
> compilerOptions - 设置与编译流程相关的选项。

compilerOptions 选项
```js
{ 
  "compilerOptions": {      
  
    /* 基本选项 */   
    "target": "es5",                       // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'  
    "module": "commonjs",                  // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'  
    "lib": [],                             // 指定要包含在编译中的库文件  
    "allowJs": true,                       // 允许编译 javascript 文件  
    "checkJs": true,                       // 报告 javascript 文件中的错误  
    "jsx": "preserve",                     // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react' 
    "declaration": true,                   // 生成相应的 '.d.ts' 文件   
    "sourceMap": true,                     // 生成相应的 '.map' 文件   
    "outFile": "./",                       // 将输出文件合并为一个文件  
    "outDir": "./",                        // 指定输出目录   
    "rootDir": "./",                       // 用来控制输出目录结构 --outDir.  
    "removeComments": true,                // 删除编译后的所有的注释  
    "noEmit": true,                        // 不生成输出文件   
    "importHelpers": true,                 // 从 tslib 导入辅助工具函数  
    "isolatedModules": true,               // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.   
    
    /* 严格的类型检查选项 */  
    "strict": true,                        // 启用所有严格类型检查选项   
    "noImplicitAny": true,                 // 在表达式和声明上有隐含的 any类型时报错  
    "strictNullChecks": true,              // 启用严格的 null 检查   
    "noImplicitThis": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误   
    "alwaysStrict": true,                  // 以严格模式检查每个模块，并在每个文件里加入 'use strict'   
    
    /* 额外的检查 */  
    "noUnusedLocals": true,                // 有未使用的变量时，抛出错误   
    "noUnusedParameters": true,            // 有未使用的参数时，抛出错误   
    "noImplicitReturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误  
    "noFallthroughCasesInSwitch": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿） 
    
    /* 模块解析选项 */   
    "moduleResolution": "node",            // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6) 
    "baseUrl": "./",                       // 用于解析非相对模块名称的基目录   
    "paths": {},                           // 模块名到基于 baseUrl 的路径映射的列表 
    "rootDirs": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容  
    "typeRoots": [],                       // 包含类型声明的文件列表   
    "types": [],                           // 需要包含的类型声明文件名列表  
    "allowSyntheticDefaultImports": true,  // 允许从没有设置默认导出的模块中默认导入。   
    
    /* Source Map Options */   
    "sourceRoot": "./",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置   
    "mapRoot": "./",                       // 指定调试器应该找到映射文件而不是生成文件的位置  
    "inlineSourceMap": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件  
    "inlineSources": true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性   
    
    /* 其他选项 */  
    "experimentalDecorators": true,        // 启用装饰器  
    "emitDecoratorMetadata": true          // 为装饰器提供元数据的支持 
  }
}
```

九、编写高效ts
1. 重复代码
* 提炼代码
interface Person {  
  firstName: string; 
  lastName: string;
}

interface PersonWithBirthDate { 
  firstName: string;  
  lastName: string; 
  birth: Date;
}

优化： extends或交叉运算符&
interface Person {  
  firstName: string;  
  lastName: string;
}

interface PersonWithBirthDate extends Person { 
  birth: Date;
}

type PersonWithBirthDate = Person & { birth: Date };

* 匹配形状
const INIT_OPTIONS = { 
  width: 640, 
  height: 480,
  color: "#00FF00", 
  label: "VGA",
};

interface Options {
  width: number; 
  height: number;
  color: string; 
  label: string;
}
其实，可以使用 typeof 操作符来快速获取配置对象的「形状」：
type Options = typeof INIT_OPTIONS;

* 提取统一类型签名
function get(url: string, opts: Options): Promise<Response> { /* ... */ } 
function post(url: string, opts: Options): Promise<Response> { /* ... */ }

从而
type HTTPFunction = (url: string, opts: Options) => Promise<Response>; 
const get: HTTPFunction = (url, opts) => { /* ... */ };
const post: HTTPFunction = (url, opts) => { /* ... */ };

2. 使用更精确的类型替代字符串类型
const dangerous: Album = { 
  artist: "Michael Jackson", 
  title: "Dangerous", 
  releaseDate: new Date("1991-11-31"), //  时间
  recordingType: "studio",
};

3. 定义的类型总是表示有效的状态