1. fs
const fs = require('fs');

// 同步读取
const data = fs.readFileSync('./file.js')
console.log('data', data) //打印出的是buffer对象，存储文件二进制结构
console.log('data', data.toString()) //打印出的是buffer转换成字符串

执行：
nodemon test.js

// 异步IO读取，面对大量io操作网络通讯、文件读取等，提高性能
fs.readFile('./file.js', (err, data) => { // 异步-》 错误对象优先的回调
    if (err) throw err;
    console.log('data', data.toString())
})

防止回调地狱，优雅性地使用promise；但是8.0以前绝大多数使用回调，所以提供了一个方法
<script>
    (async() => {
        const fs = require('fs');
        const { promisify } = require('util') // 修饰包装成promise方法
        const readFile = promisify(fs.readFile)
        const data = await readFile('./file.js');
        console.log('data', data.toString())
    })()

    // await比promise.catch捕获错误 优点在于，更好地捕获错误层级，不像promise每一层带一个catch
    try {
        a(b(c()))
    } catch(e) {}
    // 那非要对所有promise都加一个catch
    // 重写promise拦截 或 webpack AST树插件
</script>

* 流
    const fs = require('fs');
    const rs = fs.createReadStream('./1.png') // 创建一个导管流连接1.png
    const ws = fs.createWriteStream('./2.png') // 创建一个导管流连接2.png
    rs.pipe(ws) // rs的导管导入ws，连接复制，达到把1.png复制一份到2.png的目的

    stream导管逐步流入，不会整个一下流入

2. buffer缓冲区
用于操作二进制
const buf1 = Buffer.alloc(10) // 分配一片10个字节(Byte)的内存区，一个字节8位(bit)无符号数 0-255
console.log(buf1) // <Buffer 00 00 00 00 00 00 00 00 00 00>
const buf2 = Buffer.from('a') //  <Buffer 61>
const buf3 = Buffer.from('中文') //<Buffer e4 b8 ad e 6 96 87> ；3个字节，是使用utf-8编码，变字节
buf3.toString() //  中文

const buf4 = Buffer.concat([buf2, buf3]) <Buffer 61 e4 b8 ad e 6 96 87> 

3. http
const http = require('http')
const server = http.createServer((request, response) => { // request\response是流
    console.log('this is a request');
    response.end('hello 666')
})
server.listen(3000, () => { // 监听3000端口
    console.log('server start at 3000')
})

<script>
// 简单的页面服务器
const http = require('http')
const fs = require('fs');
const server = http.createServer((request, response) => {
    const { url, method, headers } = request
    if (url === '/' && method === 'GET') { // 根目录，返回index页面
        fs.readFile('index.html', (err, data) => {
            if (err) {
                response.writeHead(500, {
                    'Content-Type': 'text/plain;charset=utf-8' // 定义返回的是文本
                })
                response.end('500啦')
                return
            }
            response.statusCode = 200
            response.setHeader('Content-Type', 'text/html')
            response.end(data) // end可以接收文件多种类型，可以不用tostring
        })
    } else if (url === '/users' && method === 'GET') { // 访问user接口
        response.writeHead(200, {
            'Content-Type': 'application/json'
        })
        response.end(JSON.stringify([{name: 'tom'}]))
    } else if (method === 'GET' && headers.accept.indexOf('image/*') != -1) { // 判断请求的是否图片资源
        fs.createReadStream('.' + url).pipe(response) // 文件流和输出流连接，从而返回图片
    } else {
        response.statusCode = 404
        response.setHeader('Content-Type', 'text/plain;charset=utf-8')
        response.end('页面没有找到')
    }
})
server.listen(3000, () => { // 监听3000端口
    console.log('server start at 3000')
})
</script>
<!-- 用策略模式优化if else -->

# 开发CLI
(1) 新建项目，初始化
    npm init -y
(2) 安装
    npm i commander download-git-repo ora handlebars figlet clear chalk open -s
(3) 新建一个bin文件夹，其中新建一个入口文件kkb.js
    #!/usr/bin/env node
    指定解释器类型，希望不是nodejs运行，是shell方式运行，用js写shell程序

(4) package.json配置
"bin": {
    "kkb": "./bin/kkb.js"
},
敲kkb命令的时候，指向的路径

命令
    npm link
    建立软链接，把kkb包做了暂时的全局安装

    kkb
    此时命令kkb打印出kkb.js里的内容

(5) 定制命令行界面
在kkb.js中写入
```js
#!/usr/bin/env node
console.log('cli...')

const program = require('commander')
// 直接使用package的version
program.version(require('../package.json').version)
// 定制第一个命令
program.command('init <name>')
    .description('init project') // 说明
    // .action(name => { // 功能
    //     console.log('init ' + name)
    // })
    .action(require('../lib/init'))

program.parse(process.argv) //解析当前进程process的参数
```
可以在命令行执行验证

(6) 初始化操作
新建lib/init.js
![GITHUB](../imgs/eg1.png "git圖示")


```js
const { promisify } = require('util')
// 异步方法，把小的字符通过拼接放大
const figlet = promisify(require('figlet'))
//  清屏
const clear = require('clear')
// 用于修饰输出的命令行日志，颜色等
const chalk = require('chalk')
// 修饰log
const log = content => console.log(chalk.green(content))

module.exports = async name => {
    // 打印欢迎界面
    clear()
    const data = await figlet('KKB welcome')
    log(data)
}
```

(7) clone
download.js
```js
const { promisify } = require('util')
module.exports.clone = async function (repo, desc) {
    // repo是输入的地址，desc是放到哪儿去
    const download = promisify((require('download-git-repo')))
    // ora是状态提示
    const ora = require('ora');
    const process = ora(`下载.... ${repo}`)
    // 启动， 转动标志
    process.start()
    await download(repo, desc)
    // 提示成功，成功标志
    process.succeed()
}
```
从而在init里修改

# KOA
1. try
依赖 node v7.6.0 或 ES2015及更高版本和 async 方法支持；小于7.6版本的使用babel。

安装：
    npm i koa

    下载nodemon，自动检测到目录中的文件更改时通过重新启动应用程序来调试基于node.js的应用程序。
    npm install -g nodemon

test/index.js
```js
    const Koa = require('koa')
    const app = new Koa()
    app.use((ctx, next) => {
        ctx.body = {
            name: 'tom'
        }
    })
    app.listen(3000, () => {
        console.log('koa start...')
    })
```

执行
    nodemon index.js
localhost:3000可查看页面显示：
    {"name":"tom"}

想打个日志
```js
    const Koa = require('koa')
    const app = new Koa()
    app.use(async (ctx, next) => {
        const start = Date.now()
        await next()
        const end = Date.now()
        console.log(`请求${ctx.url} 耗时${parseInt(end - start)}ms`)
    })
    app.use((ctx, next) => {
        const expire = Date.now() + 102
        while(Date.now() < expire)
        ctx.body = {
            name: 'tom'
        }
    })
    app.listen(3000, () => {
        console.log('koa start...')
    })
```

2. 封装http框架
新建一个kkb.js，将http封装为一个类
```js
    const http = require('http')

    class KKB {
        listen(...args) {
            // 创建http服务
            const server = http.createServer((req, res) => {
                this.callback(req, res)
            })

            // 启动监听
            server.listen(...args)
        }
        use(callback) {
            this.callback = callback
        }
    }
    module.exports = KKB
```
index.js引用
``` js
    const KKB = require('./kkb')
    const app = new KKB()

    app.use((req, res) => {
        res.writeHead(200)
        res.end('hi KKB')
    })
    app.listen(3000, () => {
        console.log('监听端口已启动')
    })

```



# 实践
1. express 搭建服务
npm init 建立项目, 将入口文件index.js改为server.js
vscode打开项目，添加server.js文件
ctrl+~ 打开vs终端
npm install express
打开server.js
```js
    const express = require('express')
    const app = express()
    // 实现正常访问，访问根路径
    app.get('/', (req, res) => {
        res.send('Hello World!')
    })

    const port = process.env.PORT || 5000;

    app.listen(port, () => {
        console.log(`server is running on port ${port}`)
    })
```
执行server.js，node server.js

此时，必须每次输入命令重启，可以使用nodemon
    npm install nodemon，mac在前面加上sudo就行
    nodemon server.js 会实时更新
修改package.json的scripts：
    "scripts": {
        "start": "node server.js",
        "server": "nodemon server.js"
    },

此时，启动项目，npm run server即可

2. mongoDB 连接数据库
npm install mongoose --save
在server.js引入
    const mongodb = require('mongoose')
云mongodb上找到 “connect to your cluster" > connect instrctions > connect your application
    复制“mongodb+srv://letitia:<password>@cluster0.ndjid.mongodb.net/myFirstDatabase?retryWrites=true&w=majority"

    按照提示替换

根处新建config > keys.js
    module.exports = {
        以上链接
    }
server.js，将key.js引入
    // DB config
    const db = require("./config/keys").mongoURI
    // connect to mongodb
    mongodb.connect(db)
        .then(() => console.log("mongodb connected"))
        .catch(err => console.log(err))



---------------相关--------------------
注册
https://mlab.com/

lee letitia
mongodb

free版，新建，
    选择aws
        sandbox free版
    users
        letitia database

软件版
    products下载mongodb community server
    选择custom
    取消install mongodb compass

    数据存储在db目录，需要手动创建，要放在根目录下，在C盘安装的软件，那么在C盘创建data\db
    cd C:\
    md "\data\db"

    命令提示符运行mongodb服务器，连接建立的数据目录，并从mongodb目录的bin目录中执行 mongod.exe
        C:\Program Files\MongoDB\Server\5.0\bin cd到这个目录下有mongod.exe
        mongod --dbpath c:\data\db
        执行成功，就会输出信息

    配置mongodb服务
        C:\Program Files\MongoDB\Server\5.0\bin\mongod.cfg是配置文件，里面指定了默认的log和db路径

        想重新配置，可以先创建新目录，并更改systemLog.pah和storage.dbPath
            管理员模式新开一个cmd，创建目录，执行下面的语句来创建数据库和日志文件的目录
                mkdir c:\data\db
                mkdir c:\data\log
            systemLog:
                destination: file
                path: c:\data\log\mongod.log
            storage:
                dbPath: c:\data\db

    连接mongodb
        新开一个cmd，进入bin目录，执行
        > mongod.exe
        进入一个javascript shell命令环境
        > db
            查看当前操作的文档（数据库）
        > use admin

2.1 基本概念
SQL术语/概念	MongoDB术语/概念	解释/说明
database	   database	数据库
table	       collection	数据库表/集合
row	           document	数据记录行/文档
column	       field	数据字段/域
index	       index	索引
table joins	 	        表连接,MongoDB不支持
primary key	   primary key	主键,MongoDB自动将_id字段设置为主键


MongoDB的默认数据库为"db"，该数据库存储在data目录中；
单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。
> show dabs 显示所有数据列表
    admin
    config

> use admin 连接到一个指定的数据库
    switched to db admin

> db    显示当前数据库对象或集合
    admin

保留数据库名：
    admin： 从权限的角度来看，这是"root"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。
    
    local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合
    
    config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。


(1) 集合 --- 表格
(2) 文档 --- 行
一组键值(key-value)对(即 BSON)，是有序的。
区分类型和大小写
不能有重复的键
键是字符串


2.2 操作数据库
> use test
要插入数据，才会显示数据库test
> db.test.insert({"name": "no1name"})
> show dbs

> db.dropDatabase()
    删除当前数据库

> show tables/collections 显示表格
> db.createCollection("table1") 创建集合
    db.createCollection(name, options)
        options: 可选参数, 指定有关内存大小及索引的选项

当你插入一些文档时，MongoDB 会自动创建集合。
> db.test.insert({"name": "no1name"})

> db.collection.drop()
    删除集合

> db.test.insert(row)
  db.test.save(row)

-------------------------------------


3. 添加接口
3.1 添加注册接口，post方法需要引入bodyParse第三方工具
    npm install body-parser

server.js引入
    const bodyParser = require('body-parser')

    // 使用body-parser中间件
    app.use(bodyParser.urlencoded({extended: false})) // contentType x-www-form-urlencoded
    app.use(bodyParser.json())

3.2 引入加密
添加加密
    npm install bcrypt

    报错：
         bcrypt@5.0.1 install: `node-pre-gyp install --fallback-to-build`
         
    解决：
         npm install -g node-gyp
         npm install --global --production windows-build-tools
         npm install bcrypt

         还是不行，就用：
         npm install bcryptjs -S
        let bcrypt=require(‘bcryptjs’)

在user.js引入即可
    对注册的密码进行加密即可

新建routers/api/user.js, 添加注册接口
```js
    // login register
const express = require("express")
const router = express.Router()
const bcrypt = require("bcryptjs")

const User = require("../../models/user")

// $route GET api/users/test
// $desc    返回的请求json数据
// $access  public
router.get("/test", (req, res) => {
    // 返回一个json数据
    res.json({
        msg: "login works"
    })
})
// $route post api/users/register
// $desc    返回的请求json数据
// $access  public
router.post("/register", (req, res) => {
    console.log(req.body)
    // 查询数据库，该信息是否被注册过
    User.findOne({email:req.body.email})
        .then(user => {
            if (user) {
                return res.status(400).json({
                    email: "邮箱已被注册！"
                })
            } else {
                const newUser = new User({
                    name: req.body.body,
                    email: req.body.email,
                    password: req.body.password
                })
                // 查看bcrypt  npm官网，可查看password处理
                // To hash a password:
                bcrypt.genSalt(10, function(err, salt) {
                    bcrypt.hash(newUser.password, salt, (err, hash) => {
                        // Store hash in your password DB.
                        // hash是加密后的密码
                        if (err) throw err
                        newUser.password = hash
                        newUser.save()
                            .then(user => res.json(user))
                            .catch(err => console.log(err))
                    });
                });
            }
        })
})

module.exports = router
```

3.3 创建数据模型
建立models/user.js
```js
const mongoose = require('mongoose')
const { Schema } = mongoose

// create schema
const UserSchema = new Schema({
    _someId: Schema.Types.ObjectId,
    name: {
        type: String,
        required: true
    },
    email: {
        type: String,
        required: true
    },
    password: {
        type: String,
        required: true
    },
    avatar: {
        type: String
    },
    date: {
        type: Date,
        default: Date.now
    },
})

module.exports = User = mongoose.model("users", UserSchema)
```

3.4 头像
> npm install gravatar
在user接口文档引入
    const gravatar = require("gravatar")

    // 展示email，d: 404报错，mm会有个空头像
    const avatar = gravatar.url(req.body.email, {s: '200', r: 'pg', d: 'mm'});

3.5 添加登录接口
要使用token，要下载第三方工具
> npm install jsonwebtoken

const jwt = require("jsonwebtoken")

```js
// $route POST api/users/login
// $desc    返回token jwt(json web token) password
// $access  public
router.post("/login", (req, res) => {
    const email = req.body.email
    const password = req.body.password
    // 查询数据库
    User.findOne({email})
        .then(user => {
            if (!user) {
                return res.status(404).json({
                    email: '用户不存在！'
                })
            }
            // 密码匹配
            // req请求的密码和数据库user的密码匹配
            bcrypt.compare(password, user.password)
                .then(isMatch => {
                    if (isMatch) {
                        // 添加token
                        // jwt.sign(规则，加密名字，过期时间， 箭头函数)
                        const rule = {
                            id: user.id,
                            name: user.name
                        }
                        jwt.sign(rule, keys.secretOrKey, { expireIn: 3600 }, (err, token) => {
                            if (err) throw err;
                            res.json({
                                success: true,
                                token: "mr" + token
                            })
                        })
                    } else {
                        return res.status(400).json({
                            password: '密码错误！'
                        })
                    }
                })
        })
})
```

3.6 其他接口通过拿到有效期内的token可验证：token令牌钥匙

那怎么验证token呢？
npm install passport-jwt passport
passport需要引入和初始化(server.js)才能使会用
    const passport = require("passport")

    app.use(passport.initialize());
    require("./config/passport")(passport);

编辑passport.js
```js
const JwtStrategy = require('passport-jwt').Strategy,
    ExtractJwt = require('passport-jwt').ExtractJwt;

const mongoose = require("mongoose")
const User = mongoose.model("users")
const keys = require("../config/keys")

const opts = {}
opts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();
opts.secretOrKey = keys.secretOrKey;

module.exports = passport => {
    passport.use(new JwtStrategy(opts, (jwt_payload, done) => {
        console.log(jwt_payload)
        User.findById(jwt_payload.id)
            .then(user => {
                if (user) {
                    return done(null, user)
                }
                return done(null, false)
            })
            .catch(err => console.log(err))
    }))
}
```

user.js接口引入passport
```js
const passport = require("passport")

router.get('/current', passport.authenticate("jwt", {
    // jwt验证方式
    session: false
}), (req, res) => {
    res.json({
        id: req.user.id,
        name: req.user.name,
        email: req.user.email
    })
})
```
token 前缀改为"Bearer " + token


请求的时候字段authorization: token字段

3.7 添加其他 -- 同以上
（1）建立新数据模型profile.js
（2）新建routers/api/profile.js
（3）server.js引入该router，并使用
    const profiles = require('./routers/api/profile')
    app.use("/api/profile", profiles)

3.8 使用postman测试接口

4. 架构前端
ps: vscode  git bash的设置
    https://www.cnblogs.com/qiyebao/p/13848752.html

    ctrl+shift+p调出命令输入框
    输入：Terminal:select default shell
        有 git Bash，选择即可
        没有，就去设置
            打开vscode-》setting选项
            输入git.p, 打开setting.json编辑
                里面有一个git.path，设置 git.exe 文件所在的路径即可

直接在根文件处创建前端项目client
    > vue create client
    (a全选  i反选  空格切换选择与否)


这时候前端和后端都有了，怎么去连载他们？
    后端包根目录安装
    cnpm install concurrently
        可以将多个终端启动
    前端package添加
        "start": "npm run serve"
    后端package
        "client-install": "npm install --prefix client",
        "client": "npm start --prefix client",

        <!-- 最后再把前后端绑定启动 -->
        "dev": "concurrently \"npm run server\" \"npm run client\""
    启动
        npm run dev

