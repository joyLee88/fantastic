this doc for recording what I have done, unmade and continuously updated.

# vconsole
https://github.com/Tencent/vConsole/blob/v3.3.0/doc/tutorial_CN.md
通过变量控制vconsole显示
    引入
    <script src="./vconsole.js"></script>
    <script>
        var vConsole = new VConsole();
    </script>
    <style>
        #__vconsole {
            display: none;
        }
    </style>
    // 打开或关闭调试的vconsole
    versionClk() {
        let debugOn = localStorage.getItem('debug');
        if (debugOn !== '1') {
        document.getElementById('__vconsole').style.display = 'block';
        localStorage.setItem('debug', '1');
        }else{
        document.getElementById('__vconsole').style.display = 'none';
        localStorage.setItem('debug', '0');
        }
    }

# vue使用axios post发送json数据跨域请求403
注意：确保后台作了允许跨域的处理

(1)设置全局post请求的Content-Type值为"text/plain"
axio.defaults.headers.post['Content-Type'] = 'text/plain';

(2)然后在发送请求的时候需要对JSON数据进行stringify转化
this.$axios.post(this.url, JSON.strigify(parseData))

# vhtml
使用vhtml容易导致XSS攻击。
解决：
    用<pre>替换<div>，能识别转义字符,以及手动空格和换行

    但是pre
    可以导致段落断开的标签（例如标题、<p> 和 <address> 标签）绝不能包含在 <pre> 所定义的块里。尽管有些浏览器会把段落结束标签解释为简单地换行

    pre标签使用的时候会出现不自动换行的问题，而且存在一些默认样式，解决自动换行:
     white-space: pre-wrap; /* css-3 */
            white-space: -moz-pre-wrap; /* Mozilla, since 1999 */
            white-space: -pre-wrap; /* Opera 4-6 */
            white-space: -o-pre-wrap; /* Opera 7 */
            word-wrap: break-word; /* Internet Explorer 5.5+ */


# vue页面加载之前，短暂闪屏现象
在根DOM上
<div class="app" style="display: none;" :style="{display: 'block'}">
	{{message}}
</div>

在某块动态添加数据，出现闪烁 —— 使用v-cloak
<ul v-cloak>
  <li v-for="(item, index) in 10" :key="index">{{item}}</li>
</ul>
// 在填充数据之前隐藏
[v-cloak] {
    display: none;
}

# 从后台得到的数据对象，想要添加一个属性
这时候一般在获取的时候遍历添加进去，必须在被监听的对象之前添加进去
const result = (res && res.result && res.result.content) || [];
this.tbs = result.map(item => { // 我要监听的是this.tbs
    item.accessKeyStatus = false;
    return item
})

# vue开发中，父组件添加scoped之后。解决在父组件中无法修改子组件样式问题

# Vue Router的路由独享守卫

# 新项目启动问题
1. 脚手架创建新项目
    vue create demo
        package中启动是使用vue-cli-servce
    创建vue.config.js

    module.exports = {
        publicPath: './',
        outputDir: "dist",
            devServer: {
            // proxy: 'http://172.22.26.165/'
            port: 8080,
            open: true,
                proxy: {
                    '/image-tools': {
                        target: 'http://172.22.26.165',
                        // target: 'http://172.21.84.15',
                        ws: false,
                        changeOrigin: true
                    }
                }
            },
            configureWebpack: {
                performance: {
                    hints: 'warning',
                    //入口起点的最大体积
                    maxEntrypointSize: 50000000,
                    //生成文件的最大体积
                    maxAssetSize: 30000000,
                    //只给出 js 文件的性能提示
                    assetFilter: function(assetFilename) {
                        return assetFilename.endsWith('.js');
                    }
                }

            }
        };
    package里还是喜欢用npm start， 把serve改成start
2. 报错 this.getOptions is not a function
node-sass版本过高,dev依赖
   "node-sass": "^4.0.0",
    "sass-loader": "^7.0.0"
3. 引入新组件的时候，
（1）该组件用到的资源，如i18n
    "vue-i18n": "^8.0.0"
    加入langs文件夹及修改文件内容；
    再main.js挂载
        import i18n from './langs/i18n'
        new Vue({
            el: '#app',
            i18n,
            components: { App },
            template: '<App/>'
        })
本项目中的i18n, 合并该组件中的资源
    见./langs/
（2）在vue.config.js代理中加入新组件用到的本地开发域名映射(vue-cli脚手架搭建的项目需要手动创建vue.config.js;pacakage.json,需要用vue-cli-service serve修改默认用 webpack-dev-server 启动就会用 wepback.config.js)

4. router
(1)
npm install vue-router


(2)新建router.js
import Vue from 'vue';
import Router from 'vue-router';
import Home from '@/views/home/home.vue';

Vue.use(Router);

const appRoutes = [{
  path: '/',
  // redirect: { name: 'searching' },
  name: 'reporting',
  component: () => import('@/views/reporting/reporting.vue'),
}, {
  path: '/myreport',
  name: 'userreport',
  component: () => import('@/views/userreport/userreport.vue'),
}, {
  path: '/searching',
  name: 'searching',
  component: () => import('@/views/searching/searching.vue'),
}, {
  path: '/result',
  name: 'reporting-search',
  component: () => import('@/views/reporting/reporting-search.vue'),
}, {
  path: '/detail',
  name: 'detail',
  component: () => import('@/views/common/detail.vue'),
}, {
  path: '/details',
  name: 'report-details',
  component: () => import('@/views/report-do/report-details.vue'),
}];

const routes = [{
  path: '',
  component: Home,
  children: appRoutes,
}];

export default new Router({ routes });

(3)mainjs挂载
import router from './router'

new Vue({
  store,
  render: h => h(App),
}).$mount('#app')

(4)修改整个App.vue
  <template>
  <div id="app">
    <router-view/>
  </div>
  </template>

  <script>
  import Vuex from 'vuex';

  export default {
    name: 'app',
    mounted() { this.getUserInfo(); },
    methods: {
      ...Vuex.mapActions(['getUserInfo']),
    },
  };
  </script>

  地址切换
  <router-link to="/login/r">注册</router-link>

5. vuex
(1)npm install vuex --save
(2)store.js
import Vue from 'vue';
import Vuex from 'vuex';
// import { getUser, getPerson } from '@/service';
// import { deptTypes } from '@/utils/date-str';
// import { userInfo } from 'os';
Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    user: {}
  },
  getters: {
    // userName(state) { return state.user.personName || ''; },
    // userDeptType(state) {
    //   if (!(state.user && state.user.personInfo)) {
    //     return '0';
    //   }
    //   const deptId = state.user.personInfo.deptId || '';
    //   // const types = {
    //   //   1: ['Xxjadm'], // 总编室
    //   //   // 编辑室
    //   //   2: ['Xxjdom', 'Xxjind', 'Xxjcws', 'Xxjm1p', 'Xxjoxh', 'Xxjnmc', 'Xxjspr', 'Xxjfav'],
    //   //   3: ['Xxjtec'] // 技术局
    //   // }
    //   // eslint-disable-next-line
    //   for (const key in deptTypes) {
    //     const arr = deptTypes[key];
    //     if (arr.includes(deptId)) {
    //       return key;
    //     }
    //   }
    //   return '0';
    // },
    // personInfo(state) {
    //   return state.user.personInfo || {};
    // },
  },
  mutations: {
    // setUser(state, { user }) {
    //   state.user = user;
    // }
  },
  actions: {
    // async getUserInfo({ commit }) {
    //   const userInfo = await getUser();
    //   let user = Object.assign({}, userInfo);
    //   if (user.personId) {
    //     // const pInfo = await getPerson(user.personId);
    //     const pInfo = await getPerson();
    //     // 测试
    //     // pInfo.deptId = 'Xxjadm';
    //     user = Object.assign(user, {
    //       personInfo: pInfo
    //     });
    //   }
    //   commit('setUser', { user });
    // }
  },
});

在要用的地方引入
import Vuex from 'vuex';
computed: {
    ...Vuex.mapGetters(['userName', 'userDeptType']),
  },
methods: {
    ...Vuex.mapMutations(['setFixed']),
    ...Vuex.mapActions(['getUserInfo'])
}

（3）挂载
import store from './store'

new Vue({
  router,
  store,
  render: h => h(App),
}).$mount('#app')

6. axio elementui
npm install axios element-ui


import Vue from 'vue'
import ElementUI from 'element-ui'
import App from './App.vue'
import router from './router'
import store from './store'
import http from '@/plugins/http'
import '@/styles/common.scss'
import 'element-ui/lib/theme-chalk/index.css'

Vue.use(http);
Vue.use(ElementUI);
Vue.config.productionTip = false

new Vue({
  router,
  store,
  render: h => h(App),
}).$mount('#app')


### router传参
1.地址栏显示：
const appRoutes = [{
    path: '/',
    name: 'index',
    component: () => import('@/views/Index/Index.vue')
}, {
	path: '/login/:type',
	name: 'login',
	component: () => import('@/views/PageLogin.vue')
}]

<div class="btn-re">
    <router-link to="/login/r">注册</router-link>
</div>
<div class="btn-lo">
    <router-link to="/login/l">登录</router-link>
</div>

mouted() {
this.type = this.$route.params.type
}
watch:{
		$route(){
          this.type = this.$route.params.type
		}
	},
此时通过push，传path或path带params即可
this.$router.push('/path/type')
this.$router.push({
  path: '',
  params: {
    type: type
  }
})

还有query，类似于get

2. 地址栏不显示
此时用name, 类似于post
this.$router.push({
  name: '',
  params: {
    dd: dd
  }
})
但这种方式，要注意刷新，修改初始化的获取方式为：
mouted() {
  this.type = 'l'
}
不是重新获取参数，或是提前存在了sessionStorage

# vue跳到相同路由的时候，报错Avoided redundant navigation to current location: xxxx
不影响正常跳转，只要在router/index.js或router.js里重写push方法
const originalPush = Router.prototype.push;
Router.prototype.push = function (location) {
    return originalPush.call(this, location).catch(err => err)
}
若还报错，可能是vue-router版本旧，undefined不存在catch
  npm 升级当前vue-router : npm update vue-router --save

结果发现还是会不行，有的无法跳转？
  同一个路由，只是param不同


7. sourcemap
vue-cli在vue-config设置
const debug = process.env.NODE_ENV !== 'production'
module.exports = {
  devServer: {
    //开发环境下设置为编译好以后直接打开浏览器浏览
    open: true
  },
  configureWebpack: config => {
    //调试JS
    if (debug) config.devtool = "source-map";
  },
  css: {
    //查看CSS属于哪个css文件
    sourceMap: true
  }
};
8. 新建vue项目出现error Unexpected ‘debugger‘ statement no-debugger，开启调试模式
在 eslintConfig 下的 rules 添加 “no-debugger”: “off”, “no-console”: “off”,


# 组件开发
index.js将需要的资源都注入
开发的时候css基础样式初始化定好


# 动态引入图片
tabData: [{
			name: 'xxx',
			desc: '',
			img: require('@/assets/imgs/index/ser0.png')
		}, {
			name: 'xxx',
			desc: '',
			img: require('@/assets/imgs/index/ser1.png')
		}, {
			name: 'xxx',
			desc: '',
			img: require('@/assets/imgs/index/ser2.png')
		}, {
			name: 'xxx',
			desc: '',
			img: require('@/assets/imgs/index/ser3.png')
		}]

# 图片懒加载
<img v-lazy="url">

# input file上传图片转base64位图片
const files = e.target.files;
const file = files[0];
if (typeof FileReader === 'function') { // 转base64
  const reader = new FileReader();
  reader.readAsDataURL(file);
  const that = this;
  reader.onload = event => {
      let base64Val = event.target.result;
      that.requestUpload(base64Val, (res1, res2) => {
          that.loading = false;
          if (res1 && res1.code == 0) {
              that.faces = res1.result && (res1.result.objects || []);
          }
          if (res2 && res2.code == 0) {
              that.flags = res2.result && (res2.result.objects || []);
          }
      })
  }
} else {
  console.log('该浏览器不支持转base64功能')
  this.loading = false;
}

# 本地图片地址转base64位
<script>
  // 获取要装换的地址
  var img = document.querySelector('img').src
  // 图片地址转base64的方法
  function getBase64Image(img) {
    var canvas = document.createElement('canvas')
    canvas.width = img.width
    canvas.height = img.height
    var ctx = canvas.getContext('2d')
    ctx.drawImage(img, 0, 0, img.width, img.height)
    var ext = img.src.substring(img.src.lastIndexOf('.') + 1).toLowerCase()
    var dataURL = canvas.toDataURL('image/' + ext)
    return dataURL
  }

  var image = new Image()
  image.src = img
  // console.log(image.src)
  // 解决 canvas 将图片转为base64报错: Uncaught DOMException: Failed to execute 'toDataURL' on
  //  'HTMLCanvasElement': Tainted canvases may not be exported
  image.setAttribute('crossOrigin', 'anonymous')
  image.onload = function () {
    var base64 = getBase64Image(image)
    console.log(base64)
    let img = document.getElementById('img')
    // base64可以直接当做图片的src去赋值
    img.setAttribute('src', base64)
  }
</script>

# 全角 半角
半角
每个半角字符占用一字节空间(一字节有8位)，共256个编码空间。
半角正则表达式：/[\x00-\xff]/g

全角
每个全角字符占用两字节空间。
全角正则表达式：/[^\x00-\xff]/g

# 手机号码输入框
简单点：
<input
    type="text"
    maxlength="11"
    placeholder="输入您的手机号"
    v-model="phone"
    oninput="value=value.replace(/[^\d]/g,'')"  
/>
还得校验数字
<input
    type="text"
    maxlength="11"
    placeholder="输入您的手机号"
    v-model="phone"
    @input="handleCheck"
  />
（1）number输入框右侧有个上下箭头----------------------省略，本来打算用number做
    input::-webkit-outer-spin-button,
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
    }
    input[type=“number”]{
      -moz-appearance: textfield;
    }

    placeholder!!!!!  样式修改
    ::-webkit-input-placeholder{}    /* 使用webkit内核的浏览器 */
    :-moz-placeholder{}                  /* Firefox版本4-18 */
    ::-moz-placeholder{}                  /* Firefox版本19+ */
    :-ms-input-placeholder{}           /* IE浏览器 */
    注1：冒号前写对应的input或textarea元素等。
    注2：placeholder属性是css3中新增加的属性，IE9和Opera12以下版本的CSS选择器均不支持占位文本。

（2）防抖，防止多次调用监听
  const debounce = (fn, delay = 200) => {
      // 记录上一次的延时器
      let timer = null;
      return function() {
        const that = this;
        // 清除上一次延时器
        clearTimeout(timer)
        timer = setTimeout(function() {
          fn.apply(that)
        }, delay);
      }
  }

（3）keyup监听输入
  handleCheck() {
			this.phone = this.phone.replace(/[^\d]/g,'')
			const num = this.phone;
			debounce(() => {
				// 校验规则
				let reg = /^1[3|4|5|7|8][0-9]{9}$/;    
				if(reg.test(num)){
					console.log('ok')
				}else{
					console.log("您输入的手机号码格式错误");
				}
			})()
		}

# 邮箱检验
实例1、只允许英文字母、数字、下划线、英文句号、以及中划线组成
  ^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$
实例2、名称允许汉字、字母、数字，域名只允许英文域名
    举例：杨元庆001Abc@lenovo.com.cn
  ^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$

# input file
<div class="upload">
  <div class="upload-btn">
      <p><img src="@/assets/imgs/online/up.png" width="19" height="19" />上传本地视频</p>
      <input
          type="file"
          accept=".flv,.mkv,.mp4,.avi,.wmv,.3gp,.ts,.mov"
      />
  </div>
  <p>支持视频格式：flv、mkv、mp4、avi、wmv、3gp、ts、mov，大小限制&lt;100MB,视频时长&lt;3分钟</p>
</div>
> .upload {
    width: 100%; height: 240px;
    background: #eff1f2;
    border: 2px dashed #d9d9d9;
    border-radius: 15px;
    > .upload-btn {
        position: relative;
        margin: 72px auto 0;
        width: 271px; height: 54px;
        border-radius: 4px; overflow: hidden;
        cursor: pointer;
        > p {
            display: block;
            background: #1B86FF;
            text-align: center;
            line-height: 54px;
            color: #fff;
            img {
                vertical-align: text-bottom; padding-right: 10px;
            }
        }
        > input {
            position: absolute; right: 0; top: 0;
            width: 500px; height: 100px;
        }
    }
    > p {
        text-align: center;
        margin-top: 23px;
        font-size: 14px;
        font-weight: 400;
        text-align: center;
        color: #999999;
        line-height: 19px;
    }
}

# component + v-bind:is 实现动态组件添加
<Tab
    v-for="(item, index) in tabData"
    :key="'pro'+index"
    :name="item.name"
  >
    <component :is="item.component"></component>
  </Tab>

data: () => ({
    tabData: [{
      name: '校对实例',
      component: () => import("@/components/ToContact.vue")
    }, {
      name: '应用场景',
      component: () => import("@/components/ToContact.vue")
    }, {
      name: '核心优势',
      component: () => import("@/components/Advantage.vue")
    }, {
      name: '接入流程 ',
      component: () => import("@/components/ToContact.vue")
    }]
  })


# vue吸顶效果
导航栏用fixed/absolute，滚动条会有一部分藏在导航栏下——》一个空块
根据route获取path，显示对应导航项
外层框滚动向下到一定距离，变成overflow:hidden；框里能滚动的内容盒子变成overflow: scroll
  监听路由; 通过当前路由去找当前选项，这样刷新就不会显示不对
  watch:{
    $route(to,from){
      console.log(from.path.substring(1));//从哪来
      console.log(to.path.substring(1));//到哪去
      this.nav = this.$route.name; //当前route
    }
  }

this.$refs.dd
<div ref="dd" class="page-head" :class="headerFixed?'isFixed':''"></div>
 mounted() {
    // 监听dom渲染完成
    this.$nextTick(function(){
      const oBody = document.body;
      oBody.addEventListener('scroll', this.handleScroll);
      // 这里fixedHeaderRoot是吸顶元素的ID
      let header = document.querySelector(".page-head");
      // 这里要得到top的距离和元素自身的高度
      this.offsetTop = header.offsetTop;
      this.offsetHeight = header.offsetHeight;
      console.log("offsetTop:" + this.offsetTop + "," + this.offsetHeight);
    });
  },
  methods: {
    handleScroll() {
      let scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
      // 判断页面滚动的距离是否大于吸顶元素的位置
      this.headerFixed = scrollTop > (this.offsetTop - this.offsetHeight * 2);
    }
  },
  destroyed() {
    window.removeEventListener('scroll', this.handleScroll)
  },

.isFixed{
    position: fixed;
    top: 0;
    left: 0;
  }


# fixed 块遮住body滚动条
mounted() {
    this.$nextTick(() => {
      this.sw = this.$refs.product.clientWidth || document.body.clientWidth;
    })
  },
获取到宽度，将fixed块宽度改成sw

浮动块还不能监听到body滚动，所以在body里的page节点加上：
<div class="page product" ref="product" @mousewheel="bodyWheel">
bodyWheel(e) {
      var agent = navigator.userAgent;
      const ev = e || window.event;
      let distance = 50;
      if (/.*Firefox.*/.test(agent)) {
        distance = ev.detail > 0 ? distance : -distance;
      } else {
        distance = ev.wheelDelta > 0 ? -distance : distance;
      }
      document.body.scrollTop += distance;
    }

# 可以滚动，但是看不到滚动条
hack
这适用于简单的CSS属性：

.container {
    -ms-overflow-style: none;  // IE 10+
    scrollbar-width: none;  // Firefox}.container::-webkit-scrollbar { 
    display: none;  // Safari and Chrome}
更新：scrollbar-width为Firefox 添加了新属性。

对于旧版本的Firefox，请使用： overflow: -moz-scrollbars-none;

兼容js写法：
  用js计算内容盒子的滚动条宽度，移出外部盒子去，使其看不到
  滚动条宽度：
  scrollbarWidth = odiv.offsetWidth - odiv.clientWidth;//相减

# 判断浏览器滚动方向
var agent = navigator.userAgent;
        if (/.*Firefox.*/.test(agent)) {
            document.addEventListener("DOMMouseScroll", function(e) {
                e = e || window.event;
                var detail = e.detail;
                if (detail > 0) {
                    console.log("鼠标向下滚动");
                } else {
                    console.warn("鼠标向上滚动");
                }
            });
        } else {
            document.onmousewheel = function(e) {
                e = e || window.event;
                var wheelDelta = e.wheelDelta;
                if (wheelDelta > 0) {
                    console.log("鼠标向上滚动");
                } else {
                    console.warn("鼠标向下滚动");
                }
            }
        }

# 高度
网页可见区域宽： document.body.clientWidth
网页可见区域高： document.body.clientHeight
网页可见区域宽： document.body.offsetWidth (包括边线的宽)
网页可见区域高： document.body.offsetHeight (包括边线的高)
网页正文全文宽： document.body.scrollWidth
网页正文全文高： document.body.scrollHeight
网页被卷去的高： document.body.scrollTop
网页被卷去的左： document.body.scrollLeft
网页正文部分上： window.screenTop
网页正文部分左： window.screenLeft
屏幕分辨率的高： window.screen.height
屏幕分辨率的宽： window.screen.width
屏幕可用工作区高度： window.screen.availHeight
屏幕可用工作区宽度： window.screen.availWidth

# 将盒子定成100%高度
vh是css3属性
以前是js计算
document.body.clientHeight

# 子组件想要获取父组件节点问题
父子组件加载渲染过程：
父组件beforeCreate -> 父组件created -> 父组件beforeMount -> 子组件beforeCreate -> 子组件created -> 子组件beforeMount -> 子组件mounted -> 父组件mounted
子组件更新过程
父组件beforeUpdate -> 子组件beforeUpdate -> 子组件updated -> 父组件updated

# router-view 跟平常父子组件传值一样

# 资源引入方式
<img
    width="527"
    height="375"
    src="@/assets/imgs/index/banner1.png"
  />

data: () => ({
		tabData: [{
			name: '文本校对',
			desc: '基于新华社海量优质权威的数据、政治术语词库，利用人工智能先进算法针对文章、稿件的智能化专业校对，有效提升内容输出质量。',
			img: require('@/assets/imgs/index/ser0.png')
		}]
})

background: url(~@/assets/imgs/index/bannerbg.png) no-repeat;

data: () => ({
    tabData: [{
      name: '校对实例',
      component: () => import("@/components/Example.vue")
    }]
  })

# v-html
< img onerror="alert(11212)"> 类似这样

最好后台数据过滤，或是少用v-html； 而且用户输入框使用了v-html绑定的值，慎用


# 页面导航栏监听页面滚动位置，显示高亮
document.body.addEventListener('scroll', that.handleScroll)
handleChangeTab(index, code) {
      this.curNav = index;
      const oTab = document.getElementById('tab_' + code);
      document.body.scrollTop = oTab.offsetTop - 448;
    },
handleScroll() {
  let sctop = document.body.scrollTop;
  const navs = this.typeList[this.curType].navs;
  const h = 448 + 50;
  if (sctop <= h) {
    this.curNav = 0;
    return;
  }
  for (let i = 0; i < navs.length; i++) {
    const item = navs[i];
    const obj = document.getElementById('tab_' + item.code);
    console.log(item.code)
    const objUp = obj.offsetTop - h;
    const objBo = obj.offsetHeight + obj.offsetTop - h;
    console.log(obj.offsetTop, obj.offsetHeight)
    if (sctop < objBo && sctop >= objUp) {
      this.curNav = i;
      break;
    }
  }
},

# 输入完成后，回车登录
mounted(){
    //绑定事件
     window.addEventListener('keydown',this.keyDown);
  }

methods:{
    keyDown(e){
        //如果是回车则执行登录方法
      if(e.keyCode == 13){
        this.login();
      }
    }
}

destroyed(){
        window.removeEventListener('keydown',this.keyDown,false);
  }

# 用户登录信息失效
在axio层写一个拦截器，只要调用接口，返回403, 就跳转到登录页面（window.location.href)
修改我的http.js
    import axios from 'axios';
    import store from '@/store';
    import router from '@/router';

    axios.interceptors.response.use(
      ({ data, headers, config }) => { // data是后台返回的对象
        // if (config.url.includes('selectAuthorityInfo')) {
        if (config.url.includes('authorityInfo')) {
          const intranet = headers['X-user-resource'] || headers['x-user-resource'];
          localStorage.setItem('intranet', intranet);
        }
        return data;
      },
      err => {
        if (err.response && err.response.status == 403) { // 监听http状态
          store.state.user = {};
          window.sessionStorage.removeItem('UJZ');
          router.replace({
            path: 'login/l',
            query: {
              redirect: router.currentRoute.fullPath
            }
          })
        }
        return Promise.reject(err)
      },
    );
https://www.jianshu.com/p/a0c67f4e145e

若是不仅仅在于调用接口，这时候应该是有个轮询，来随时查看登录状态

# delete请求
和post不一一样，只有两个参数，post、put、patch有三个

axios.delete(’/api’,{data:{userId:1}})

通过设置config里的data来进行传参

const formDel = (url, param, opt) => {
	const fd = getFormData(param);
	// eslint-disable-next-line
	const h = opt.headers ? opt.headers : {}
	opt.headers = Object.assign(h, { 'Content-Type': 'application/x-www-form-urlencoded' });
	// eslint-disable-next-line
	delete opt.useFormData;
	return axios.delete(url, {data: fd}, opt);
};

# slot
子组件里留一个,绑定数据obj
  <slot name="a" :obj="obj"></slot>
父组件使用插槽，但是想要子组件的数据传过来；父组件通过slot-scope就可以拿到子组件slot上绑定的值
  <child>
    <div slot="a" slot-scope="props">{{props.obj}}</div>
  </child>

  有个问题，父组件data有个对象Json{a: {'txt': xxx}, b: {'txt':xxx}....}
  如果我想用父组件这个data，是获取不到的，会报Json[props.obj] undefined
    <div slot="a" slot-scope="props">{{Json[props.obj].txt}}</div>
  最终，还是父亲给child组件传入数据Json
    <child slot-data="{objcode: Json}">
      <div slot="a" slot-scope="props">{{props.config[props.obj].txt}}</div>
    </child>
    子组件加一个
    <slot name="a" :obj="obj" :config="slotData && slotData[o.code]"></slot>

# create+watch === compute
但是某些情况，prop监听的是一个对象；当下次传入的还是这个对象，computed对这个对象是没法监听到变化的，是有限制的；
watch可以用其他值来判断是否更新这个对象，无论传入对象相同与否。

# 报错：Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.
根据上面的解释我们可以得出结论：在v-if为false时，如果我们后续的js操作了v-if控制的dom元素，将会因为该部分dom元素不存在而抛出上述异常。
针对这个问题，我们可以用v-show来代替v-if，就可以解决这个问题。

# 自定义的组件上不能绑定事件@

# 上传文件的限制
https://blog.csdn.net/qq_43784821/article/details/120246767?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-4.no_search_link&spm=1001.2101.3001.4242

# 文件后缀名对应的filetype
https://blog.csdn.net/zhuyu19911016520/article/details/88714289

# input 文件上传后再次点击没有反应
需要清空上次的选择
this.$refs.uploadV.value = '';

# post 下载文件
文件小或是返回的是文件地址，用get方式下载，window.open或a链接下载
export const downloadExports = async (id, type) => {
  const url = `${path}/event/export?id=${id}&type=${type}`;
  window.open(url, '_blank');
};
await downloadExports(this.eventId);

当文件比较大或返回的是文件流，用post方式
  定义请求：
  export const wordDown = async (param, opt) => {
    const url = `${path}/api/aicheck/text/download`;
    // const opt = {
    //   useFormData: true,
    // }
    // const res = await post(url, param, opt);
    return await post(url, param, opt, {
      isAll: true
    });
  };
  使用：
  async downFile(w) {
      const data = await wordDown(
          {
              html: w
          },
          {
              responseType: "blob"
          }
      );
      this.download(data);
      },
  download(res) {
    <!-- 后端需要设置如下：
      Access-Control-Expose-Headers : 'Content-Disposition'
      后台Content-Disposition，需要配合 application/octet- stream
     -->
    <!-- 此处要在http拦截器处，将header返回到res里，能够获取到 -->
      const disposition =
          res.headers["content-disposition"] ||
          res.headers["Content-Disposition"]; // issues#67 xp下导出功能无响应
      const fileName = disposition.match(/filename=(\S*?)(;|$)/)[1];
      const downloadElement = document.createElement("a");
      const href = window.URL.createObjectURL(res.data); // 创建下载的链接
      downloadElement.href = href;
      downloadElement.download = decodeURI(fileName); // 下载后文件名
      document.body.appendChild(downloadElement);
      downloadElement.click(); // 点击下载
      document.body.removeChild(downloadElement); // 下载完成移除元素
      window.URL.revokeObjectURL(href); // 释放掉blob对象
  },

# element
dialog 会被蒙版遮住：
  :modal-append-to-body="false" 或  :append-to-body="true"

# 上线前检测
改icon；logo可到首页；导航可点击块和切换刷新没问题


# 部署文件及web端服务
（1）打开xshell，账户密码登录，将前端文件部署;
  xshell新建登录ip1,将文件部署
（2）连接打开nginx web服务器，将文件关联过来
	cd deploy/jiaozhen // 切换到IP1前端文件所在目录
	scp -r * xhdev@xx.xx.xx.xx:/home/xhdev/docker-data/jiaozhen-nginx/html // 复制该目录下所有文件到web服务器html下

# 打包提示entrypoint size limit警告
entrypoint size limit: The following entrypoint(s) combined asset size excee，入口点大小超过了建议的限制244kb

在webpack中配置
performance: { hints: false }

在vue.config.js配置：
configureWebpack: config => {
     if (debug) {
         config.devtool = 'source-map';
         config["performance"] = {
             maxEntrypointSize: 50000000,
             maxAssetSize: 30000000,
         }
     }
}

----------------------------------------css------------------------------------
通过Can I Use[4]来查找某个属性的浏览器兼容性
CSS的规范，这个比较权威的就是W3C的CSS Working Group


css偷懒

CSS Grid Generator：  https://cssgrid-generator.netlify.app/
CSS Layout：  https://csslayout.io/
Flexbox Generator：https://loading.io/flexbox/
行数列数快速布局：cssgr.id 
https://grid.layoutit.com/


# 不用flex，块要上下居中
display: table-cell; vertical-align: middle;

# 图片上下左右自适应
.box {
  width: 100px; height: 100px; display:table-cell; vertical-align: middle;
  background:#000; text-align:center;
}
.box img {
  max-width: 100%; max-height:100%; vertical-align:middle;
}

# 字数多 省略号
.ellipsis{
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    -o-text-overflow: ellipsis;
}
鼠标移上去显示全部
.showEllipsis:hover
{
    cursor: pointer;
    /*background: #000;*/
    white-space: pre-wrap;
    width:200px;
    text-overflow:inherit;
    overflow:visible;
}