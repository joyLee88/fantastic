URI
    统一资源标识符，有子集URL和URLN（统一资源名称）
    表示请求服务器的路径，定义一个资源。类似身份证号码，抽象的
URL
    资源定位符
    说明要如何访问这个资源，如通过http://，具体标识。URL是一种URI



### origin
    http://www.baidu.com/path/path1?xx=xx&xxx=xxx
    http：//    超文本传输协议
    www.baidu.com   主机名（网站名）
        www         服务器名
        baidu.com   域名
    /   根目录


### http
    运行在TCP/IP上的超文本传输协议；
    应用层的面向对象的协议；
    工作于客户端-服务端架构上。

    请求消息Request
        客户端发送一个HTTP请求到服务器，消息格式4部分：
            请求行：以一个方法符号开头，跟着URI和协议到版本
            请求头部：说明服务器要使用的附加信息
            空行：请求头部后面到空行是必须的
            请求数据：也叫主体，可以添加任意的其他数据。
    响应消息Response
        服务器接收并处理客户端发送过来的请求后会返回一个HTTP的响应消息，也是4部分：
            状态行：HTTP版本、状态码、状态消息
            消息报头：说明客户端要使用的附加信息
            空行：必须
            响应正文：服务哦返回给客户端的文本信息
        
    状态码：第一个数字定义响应的类型
        1xx 指示信息——表示请求已接收，处于协议的中间状态，继续处理
        2xx 成功——表示请求已被成功接收、理解、接受
        3xx 重定向——要完成请求必须进行更一步的操作，重新请求
        4xx 客户端错误——请求有语法错误或请求无法实现
        5xx 服务器端错误——服务器未能实现合法的请求

        101切换请求协议，从HTTP切换到wbsocket
        301永久重定向（会缓存）、302临时重定向（不缓存）
        304协商缓存中
        400请求错误
        403服务器禁止访问
        500服务器端错误
        503服务器繁忙


    请求方法：
        GET、POST、HEAD(类似get，获取报头元信息)
        OPTIONS（常用语跨域）、PUT（修改数据）、DELETE(请求服务器删除指定页面)、TRACE（追踪请求）、CONNECT（建立连接隧道，用于代理服务器）

    HTTP工作原理
        客户端连接web服务器HTTP端口80，建立一个TCP连接
        发送HTTP请求
        服务器接受请求并返回HTTP响应
        释放TCP连接
        客户端浏览器解析HTML内容
    
    HTTP缓存
        HTTP 缓存又分为强缓存和协商缓存：
    
        首先通过 Cache-Control 验证强缓存是否可用，如果强缓存可用，那么直接读取缓存
        如果不可以，那么进入协商缓存阶段，发起 HTTP 请求，服务器通过请求头中是否带上
    If-Modified-Since 和 If-None-Match 这些条件请求字段检查资源是否更新：
            . 若资源更新，那么返回资源和 200 状态码
            . 如果资源未更新，那么告诉浏览器直接使用缓存获取资源

### 有这样的问题：浏览器输入地址，按下回车经过了怎样的流程？
1. 浏览器向DNS服务器请求，解析该URL中域名对应的IP地址；
2. 得到IP地址，根据IP和端口号，和服务器建立TCP连接； 此时进行了一个来回！
3. 根据域名后带的文件路径，发出请求，作为TCP三次握手第三个报文发送给服务器
4. 服务器作出响应，把对应html文本发送给浏览器；
5. 释放TCP连接；
6. 浏览器渲染得到的html内容

    解析html以构建dom树和css树 -> DOM和CSSOM合并，构建render树 -> 浏览器根据render树，布局render树，计算每个节点位置等 ->通过显卡，绘制render树到屏幕上

### ps
    OSI参考模型：物数网传会表应

    默认端口
        端口号的范围是从1～65535。
        其中1～1024是被RFC 3232规定好了的，被称作“众所周知的端口”(Well Known 
    Ports)；从1025～65535的端口被称为动态端口（Dynamic Ports），可用来建立与其它主机的会话，也可由用户自定义用途。

    一些常见的端口号及其用途如下：
        21端口：FTP 文件传输服务
        22端口：SSH 远程连接服务
        23端口：TELNET 终端仿真服务
        25端口：SMTP 简单邮件传输服务
        53端口：DNS 域名解析服务
        80端口：HTTP 超文本传输服务
        443端口：HTTPS 加密的超文本传输服务

        3306端口：MYSQL数据库端口
        5432端口：PostgreSQL数据库端口
        6379端口：Redis数据库端口
        8080端口：TCP服务端默认端口
        8888端口：Nginx服务器的端口
        9200端口：Elasticsearch服务器端口
        27017端口：mongoDB数据库默认端口
        22122端口：fastdfs服务器默认端口