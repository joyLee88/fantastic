模块化

1. CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。
	通过对module.exports或exports的属性赋值来达到暴露模块对象的目的

CommonJS 的规范中，每个 JavaScript 文件就是一个独立的模块上下文（module context），在这个上下文中默认创建的属性都是私有的。在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。

同步加载模块,在浏览器中会出现堵塞情况，所以不适用

2. AMD规范则是非同步加载模块，允许指定回调函数
	通过返回一个对象做为模块对象

异步，需要定义回调define方式

3. 模块化发展
以前写 命名空间方式 -》 IIFE立即执行函数 -》 模块化规范+模块加载器

(1) amd异步加载  require.js
* require.js的实现 define('modle', [加载资源]， ()=>{})
* 使用起来比较复杂
* 模块js文件请求频繁
* 先加载依赖

// require.js 就是使用的这种风格

define(['a.js', 'b.js'], function(A, B) {
    // do something
})


// 实现思路：建一个node节点, script标签
var node = document.createElement('script')
node.type = 'text/javascript'
node.src = '1.js'

// 1.js 加载完后onload的事件
node.addEventListener('load', function(evt) {
    // 开始加载 2.js
    var node2 = document.createElement('script')
    node2.type = 'text/javascript'
    node2.src = '2.js'
    // 插入 2.js script 节点
    document.body.appendChild(node2)
})
// 将script节点插入dom中
document.body.appendChild(node);

(2) cmd sea.js
* sea.js
* 按需加载
* 碰到require('2.js')就立即执行2.js
define(function() {
    var a = require('2.js')
    console.log(33333)
})

(3) commonjs 服务端规范
* 一个文件就是一个模块
* 每个模块都有单独的作用域
* 通过module.exports导出成员
* 通过require函数载入模块
* commonjs是以同步的方式加载模块 node的执行机制是在启动时去加载模块 在执行阶段不需要加载模块
* CommonJS 模块输出的是一个值的拷贝，一旦输出一个值，模块内部的变化就影响不到这个值
* CommonJS 模块加载的顺序，按照其在代码中出现的顺序
* 由于 CommonJS 是同步加载模块的，在服务器端，文件都是保存在硬盘上，所以同步加载没有问题，但是对于浏览器端，需要将文件从服务器端请求过来，那么同步加载就不适用了，所以，CommonJS 是不适用于浏览器端的。
* CommonJS 模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存

(4) ESModules
* 在语言层面实现了模块化 通过给script的标签 将type设置成module 就可以使用这个规范了
* 基本特性
	* 自动采用严格模式，忽略use strict
	* 每个ESM模块都是单独的私有作用域
	* ESM是通过CORS去请求外部JS模块的
	* ESM中的script标签会延迟执行脚本
	* ES6 模块是动态引用，引用类型属性被改变会相互影响
* export import 进行导入导出
	* 导出的并不是成员的值 而是内存地址 内部发生改变外部也会改变，外部导入的是只读成员不能修改
	* ES module中可以导入CommonJS模块
	* CommonJS中不能导入ES module模块
	* CommonJS始终只会导出一个默认成员
	* 注意import不是解构导出对象

