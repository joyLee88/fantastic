# w3c标准是什么
W3C标准英文全程是World Wide Web Consortium，中文是万维网联盟。
一系列标准的集合。网页主要有三部分组成：结构（Structure）、表现（Presentation）、行为（Behavior）

web标准：将结构、表现、行为分离，使其更具有模块化。

w3c标准：标签字母要小写，双标签要闭合，标签不允许随意嵌套。
　　　　尽量使用外部样式和外链js，使结构、表现、行为分为三块，这样可以提高页面渲染速度。
　　　　样式尽量少用行内样式，id和class名要做到见名知意。
　　　　不需要变动页面内容，便可提供打印版本，不需要提供复制内容，提高网站易用性。

# javascript
核心（ECMAScript）
	语法、数据结构、流程控制

文档对象模型（DOM）
	操作Dom的API

浏览器对象模型（BOM）
	对浏览器窗口进行访问和操作

# Object.prototype.toString.call(null) // “[object null]” 判断最完整
# typeof
基本类型number\string\boolean\bigint\symbol\undefined(除了null)
复合类型能判断object、function
# o instanceof X
检测实例o的原型是否该构造函数X的prototype
function newInstanceOf(left, right) {
    let rightProto = right.prototype;
    let leftP = left.__proto__;
    while(true) {
        if (leftP === null) return false;
        if (leftP === rightProto) return true;
        leftP = leftP.__proto__;
    }
}
# Array.isArray()   isNaN()

# 如何判断一个对象是否空对象
(1) ES6的Object.keys()
Object.keys(o).length == 0
(2) Object.getOwnPropertyNames(o).length == 0
(3) JSON.stringify(o) == "{}"
(4) jquery的$.isEmptyObject(o)

# this
this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。

1. 第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。
2. 第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。
3. 第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。
4. 第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。

	apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。

	call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。
	
	bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变，传入参数类似call，逐个列举！

这四种方式，使用构造器调用模式的优先级最高，然后是 apply 、 call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。

call()、apply()、bind() 都是用来重定义 this 这个对象的，将原来的上下文this完全替代，改变方法的上下文！
	obj.myFun.call(o);　
	注意：bind返回的是一个新函数，必须调用自执行
	obj.myFun.bind(o)();　

# window
目前JavaScript脚本的运行环境有浏览器和node.js环境两种。
this === window ? 'browser' : 'node'; （在ES5的全局环境下或函数里）
	如果不为window，则当前脚本运行在node.js环境中。

浏览器里面，顶层对象是window
Node的顶层对象是global，其他环境都不支持，且没有window和self；
 	Web Worker 没有window， 有self。

# 原型
内置属性__proto__ ，指向创建它的构造函数的原型对象
对象之间通过__proto__连接起来的对象链， 当前对象找不到该属性，往上找，直到null。
任何对象都具有隐式原型属性（__proto__），只有函数对象有显式原型属性（prototype）

	* 原型：
	原型就是具有公共属性和方法的对象。
	原型的作用（1）数据共享，节省内存空间
				其实就是为类(函数)提供了一个【公共区域】，在这个公共区域中声明的属性和方法能够被所有通过这个类所创建的对象所访问到。减少内存消耗。
				（2）为了实现继承
	
	当我们使用new 关键字实例化一个类生成一个对象，这个对象内部有个指针指向构造函数的 prototype 属性对应的值，这个指针被称为原型。
		每个对象都有原型，除了null和undefined
	* 原型链：当我们访问一个对象的属性时，如果对象内部不存在这个属性，那么就会去它的原型对象上找这个属性，该原型对象又会有自己的原型，这种寻找的方式，看起来就像是链子一样，这便是原型链。

对象obj原型的获取方法有：obj.__proto__ 、obj.constructor.prototype、Object.getPrototypeOf(obj)

# 面向对象
js的面向对象衍生方式  简单对象返回-》 构造函数  -》 prototype

# 继承
父类.call(this) // Parent.apply(this, arguments)
子类.prototype = Object.create(父类.prototype);
子类.constructor = 子类 (构造函数指向自己)

extends指定继承的父类
	Extends  super 类似call 执行父类构造函数

js 在ES6前一般称为伪继承，主要有四种方式
	原型链继承：无法向父类构造函数传参
	构造函数继承：无法实现函数的复用
	组合继承：使用原型继承继承父类的属性Parent.call(this)，使用构造函数继承父类的方法new Parent()。但子类调用了两次父类构造函数，生成了两个父类实例
		function Son(age) {
			Father.call(this, age)
		}
		​
		Son.prototype = new Father()
		let son = new Son(12)
	寄生组合继承 （常用）

# new 关键字
新生一个对象——其__proto指向构造函数的原型——构造函数作用域赋给新对象，绑定this——为新对象添加属性，执行构造函数——返回对象
Var obj = {};
Obj.__proto__ = Person.prototype;
Person.call(obj);
Return obj;
	
>
# 事件机制
事件源、事件、事件监听
Js事件驱动的语言，如按钮点击等
Dom有4次更新，DOM 0级事件处理，DOM 2级事件处理和DOM 3级事件处理。
Dom0:  onevent
Dom2: 	addEventListener   removeEventListener
Dom3:	添加了更多事件类型，load\scroll\blur\focus.....

事件流：网页元素接收事件的顺序，分为两种机制：冒泡和捕获
当一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：
	捕获阶段：事件从window对象自上而下向目标节点传播的阶段；
	目标阶段：真正的目标节点正在处理事件的阶段；
	冒泡阶段：事件从目标节点自下而上向window对象传播的阶段。

Dom.addEventListener(‘click’, function(){}, true)
	第三个参数是一个布尔值，当为true时，表示在捕获阶段调用事件处理程序，不传或者为false时，表示在冒泡阶段调用事件处理程序

所以，事件流发生在父元素和子元素之间，而不是两个同级的元素。

事件委托：给父级元素注册事件，监听子元素的点击事件
	用addEventListener
	const ul = document.querySelector('ul');
	ul.addEventListener('click', function(e) {
		const target = e.target;
		if (target.tagName.toLowerCase() === 'li') {
			const liArr = this.querySelectorAll('li');
			// 因为liArr 是类数组，所以用call
			const index = Array.prototype.indexOf.call(liArr, target);
		}
	})

防止冒泡
	w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true
	//如果提供了事件对象，则这是一个非IE浏览器 
	if ( e && e.stopPropagation ) 
		//因此它支持W3C的stopPropagation()方法 
		e.stopPropagation(); 
	else {
		//否则，我们需要使用IE的方式来取消事件冒泡 
		window.event.cancelBubble = true; 
	}

阻止默认事件
	w3c的方法是e.preventDefault()，IE则是使用e.returnValue = false;

	//阻止默认浏览器动作(W3C) 
    if ( e && e.preventDefault ) 
        e.preventDefault(); 
    //IE中阻止函数器默认动作的方式 
    else 
        window.event.returnValue = false; 
    return false; 

return false
	javascript的return false只会阻止默认行为，jQuery中的意思是阻止默认行为又防止对象冒泡。

# Webpack 
我认为webpack的主要原理是将所有的资源都看成一个模块，并且把页面逻辑当成一个整体，通过给定入口文件，找到所有依赖，将各个依赖经过loader和plugins处理后，打包在一起，最后输出浏览器可识别的js文件。
webpack的核心概念：
Entry: 入口文件，Webpack 会从该文件开始进行分析与编译；
Output: 出口路径，打包后创建 bundler 的文件路径以及文件名；
Module: 模块，在 Webpack 中任何文件都可以作为一个模块，会根据配置的不同的 Loader 进行加载和打包；
Chunk: 代码块，可以根据配置，将所有模块代码合并成一个或多个代码块，以便按需加载，提高性能；
Loader: 模块加载器，进行各种文件类型的加载与转换；
Plugin: 拓展插件，可以通过 Webpack 相应的事件钩子，介入到打包过程中的任意环节，从而对代码按需修改；

打包加速的方法：
	devtool 的 sourceMap较为耗时
	第三方依赖外链script引入：vue、ui组件、JQuery等
	babel-loader开启缓存cache
	Tree Shaking 摇树：基于ES6提供的模块系统对代码进行静态分析, 并在压缩阶段将代码中的死代码（dead code)移除，减少代码体积。

打包体积优化思路：
	webpack-bundle-analyzer插件可以可视化的查看webpack打包出来的各个文件体积大小，以便我们定位大文件，进行体积优化
	提取第三方库或通过引用外部文件的方式引入第三方库
	代码压缩插件UglifyJsPlugin
	服务器启用gzip压缩
	按需加载资源文件 require.ensure=
	剥离css文件，单独打包
	去除不必要插件，开发环境与生产环境用不同配置文件
	SpritesmithPlugin雪碧图，将多个小图片打包成一张，用background-image，backgroud-pisition，width，height控制显示部分
	url-loader 文件大小小于设置的尺寸变成base-64编码文本，大与尺寸由file-loader拷贝到目标目录

常用插件简述
	webpack-dev-server
	clean-webpack-plugin：编译前清理输出目录
	CopyWebpackPlugin：复制文件
	HotModuleReplacementPlugin：热更新
	ProvidePlugin：全局变量设置
	DefinePlugin：定义全局常量
	splitChunks（老版本用CommonsChunkPlugin）：提取公共模块，将符合引用次数的模块打包到一起
	mini-css-extract-plugin（老版本用ExtractTextWebpackPlugin）：css单独打包
	TerserPlugin（老版本用UglifyJsPlugin）：压缩代码
	progress-bar-webpack-plugin：编译进度条
	DllPlugin& DllReferencePlugin：提高打包效率，仅打包一次第三方模块
	webpack-bundle-analyzer：可视化的查看webpack打包出来的各个文件体积大小
	thread-loader,happypack：多进程编译，加快编译速度

# MVVM
MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化我们的开发效率。

1. MVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Controller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。

2. MVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中我们使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的Controller 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此我们可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。

3. MVVM 模式中的 VM，指的是 ViewModel，它和 MVP 的思想其实是相同的，不过它通过双向的数据绑定，将 View 和 Model 的同步更新给自动化了。当 Model 发生变化的时候，ViewModel 就会自动更新；ViewModel 变化了，View 也会更新。这样就将 Presenter 中的工作给自动化了。我了解过一点双向数据绑定的原理，比如 vue 是通过使用数据劫持和发布订阅者模式来实现的这一功能
# Vue
## 1.双向数据绑定：
	通过使用数据劫持和发布订阅者模式来实现
	通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。

## 2.vue响应式
vue2 ：Object.defineProperty
vue3 ： proxy

区别：
	1. API: Proxy 劫持整个对象，包括对象属性的增删改查。Object.defineProperty 劫持的对象的某一个属性的访问和修改，无法监听新增和删除。
	2.兼容性：Object.defineProperty支持IE9+和主流浏览器。Proxy支持主流浏览器不支持IE。
	3.性能：Proxy 比 Object.defineProperty 要慢，但vue3的vue2响应式性能要好，好在初始化阶段。vue2是递归响应式，vue3是延时响应式

响应式原理：
	Vue.js 的核心思想之一，它的本质是当数据变化后会自动执行某个函数。

	响应式的实现基本都是靠数据劫持！
	在 Vue.js 2.x 中，是通过 Object.defineProperty API 劫持数据的变化，在数据被访问的时候收集依赖，然后在数据被修改的时候通知依赖更新。
	而到了 Vue.js 3.0，作者使用 Proxy API 来劫持数据，并重写了响应式部分。

如果延时响应式，那会不会每次访问数据的时候都要重新定义一次响应式呢，其实是不用的，在 Vue.js 2.x 中，在执行一次 observe 后，会把观察者对象 ob 保留在 value.__ob__ 属性中；在 Vue.js 3.0 中，会用 reactiveMap 保留已定义的响应式对象，这样下一次就直接从缓存里拿到对应的值了，这就是典型的空间换时间的思想。

## 3.虚拟DOM
Virtual DOM 算法是有三个核心实现。
	一是 用JS对象模拟DOM树，可以理解组合VNode。
	二是 diff算法，比较新旧VNode的差异。
	三是 打补丁patch，将差异应用到真正的DOM树上。

建立虚拟DOM tree，通过createDocumentFragment
	把diff结果表通过DOM fragment更新到浏览器DOM中

Virtual DOM 算法主要是实现上面步骤的三个函数：element，diff，patch
// 1. 构建虚拟DOM 
var tree = el('div', {'id': 'container'}, [
 el('h1', {style: 'color: blue'}, ['simple virtal dom']),
 el('p', ['Hello, virtual-dom']),
 el('ul', [el('li')]) 
]) 
// 2. 通过虚拟DOM构建真正的DOM 
var root = tree.render() 
document.body.appendChild(root) 
// 3. 生成新的虚拟DOM 
var newTree = el('div', {'id': 'container'}, [
 el('h1', {style: 'color: red'}, ['simple virtal dom']),
 el('p', ['Hello, virtual-dom']),
 el('ul', [el('li'), el('li')]) 
]) 
// 4. 比较两棵虚拟DOM树的不同 
var patches = diff(tree, newTree) 

// 5. 在真正的DOM元素上应用变更 
patch(root, patches)

## 4.computed 和 watch 的区别

	computed 是计算属性，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容。返回的是一个属性值可以理解为返回一个数据。
	watch 监听到值的变化就会执行回调，在回调中可以进行一些逻辑操作。可以理解为执行某个方法。
	
	从使用场景上说，computed 适用一个数据被多个数据影响，而 watch 适用一个数据影响多个数据。
## 5. 生命周期
Vue 一共有8个生命阶段，分别是创建前、创建后、加载前、加载后、更新前、更新后、销毁前和销毁后，每个阶段对应了一个生命周期的钩子函数。

（1）beforeCreate 钩子函数，在实例初始化之后，在数据监听和事件配置之前触发。因此在这个事件中我们是获取不到 data 数据的。
（2）created 钩子函数，在实例创建完成后触发，此时可以访问 data、methods 等属性。但这个时候组件还没有被挂载到页面中去，所以这个时候访问不到 $el 属性。一般我们可以在这个函数中进行一些页面初始化的工作，比如通过 ajax 请求数据来对页面进行初始化。
（3）beforeMount 钩子函数，在组件被挂载到页面之前触发。在 beforeMount 之前，会找到对应的 template，并编译成 render 函数。
（4）mounted 钩子函数，在组件挂载到页面之后触发。此时可以通过 DOM API 获取到页面中的 DOM 元素。
（5）beforeUpdate 钩子函数，在响应式数据更新时触发，发生在虚拟 DOM 重新渲染和打补丁之前，这个时候我们可以对可能会被移除的元素做一些操作，比如移除事件监听器。
（6）updated 钩子函数，虚拟 DOM 重新渲染和打补丁之后调用。
（7）beforeDestroy 钩子函数，在实例销毁之前调用。一般在这一步我们可以销毁定时器、解绑全局事件等。
（8）destroyed 钩子函数，在实例销毁之后调用，调用后，Vue 实例中的所有东西都会解除绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。

当我们使用 keep-alive 的时候，还有两个钩子函数，分别是 activated 和 deactivated 。用 keep-alive 包裹的组件在切换时不会进行销毁，而是缓存到内存中并执行 deactivated 钩子函数，命中缓存渲染后会执行 actived 钩子函数。

## 6.$route  $router
$route 是“路由信息对象”，包括 path，params，hash，query，fullPath，matched，name 等路由信息参数。
$router 是“路由实例”对象包括了路由的跳转方法，钩子函数等

>  $router
this.$router 是一个路由导航对象，全局的路由实例，router构造方法的实例。用它可以方便的使用JS代码实现编程式路由导航，例如页面的前进、后退、跳转等
// 字符串
this.$router.push('home')
// 对象
this.$router.push({ path: 'home' })
// 命名的路由
this.$router.push({ name: 'user', params: { userId: 123 }})
// 带查询参数，变成 /register?plan=123
 this.$router.push({ path: 'register', query: { plan: '123' }})

>  $route
this.$route：当前路由信息对象，即$router会被注入每个组件中！ 是路由参数对象，表示当前激活的路由的状态信息，包含了当前 URL 解析得到的信息，还有 URL 匹配到的 route records（路由记录），路由中的所有参数， params、query 都属于它

$router 是用来发送的， $route 是用来接收的

### hash
早期前端路由通过location.hash来实现，url中#后面的类容

url中hash值：只是客户端的一种状态，向服务端发送请求时hash部分不会被发送。
			hash值的改变，在浏览器的访问历史中增加一个记录，因此能回退、前进。
			可用hashchange事件来监听hash值变化

### vue Router 的路由模式 hash和history实现原理


## 7.vue 组件之间的传值通信
组件传值可分为父子组件传值和兄弟组件传值
	父组件给子组件传值：使用props
	子组件给父组件传值：使用$emit触发事件

	兄弟组件：使用Bus.js, 两个组件引入同一个Bus.js

	使用vuex可以处理上述情况的传值问题。

## 8. key
React / Vue.js 之类的框架为什么需要给组件添加 key 属性，其作用是什么？

遍历：
	没有key的时候，遍历模板，diff对比虚拟新旧节点速度快，节点也能复用，即就地复用，一种鸭子辩型的复用。这种复用，不会改变节点位置，只是修改节点的内容。

Map:
   Key，给每一个vNode唯一的id，依靠key,对应新旧节点。Key在数据变化时候，强制更新组件，不能原地复用，改变了节点位置。

在交叉对比中，当新节点跟旧节点头尾交叉对比没有结果时，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点（这里对应的是一个key => index 的map映射）。
如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个map映射，另一种是遍历查找。相比而言，map映射的速度更快。

# Vuex
专门vue开发的状态管理。对需要共享的数据进行集中式管理。
默认的五种基本的对象：
state：存储状态（变量）
getters：对数据获取之前的再次编译，可以理解为state的计算属性。我们在组件中使用 $sotre.getters.fun()
mutations：修改状态，并且是同步的。在组件中使用$store.commit('',params)。这个和我们组件中的自定义事件类似。
actions：异步操作。在组件中使用是$store.dispath('')
modules：store的子模块，为了开发大型项目，方便状态管理而使用的。这里我们就不解释了，用起来和上面的一样。
# Package
Dependencies 在生产环境中需要用到的依赖
devDependencies 在开发、测试环境中用到的依赖 ,babel\eslint\vue-loader\webpack

# Axios
# Vue keeplive缓存
有些组件没有必要重复初始化，组件缓存
keepalive是一个抽象组件，缓存vnode，缓存的组件不会重走生命周期。
被包含在 keep-alive 中创建的组件，会多出两个生命周期的钩	子: activated 与 deactivated：
如从列表页跳到详情页
include=”a,b”是需要缓存name为a或b的组件；
	exclude是除了某些组件都缓存，优先级高些；
max
 	<keep-alive> 
<router-view> 
<!-- 所有路径匹配到的视图组件都会被缓存！ --> 
</router-view> 
</keep-alive>

# 组件化
高复用、高可维护性的代码封装。防止耦合。

功能组件：基础功能组件、通用UI组件、基础业务组件

模块化：同一功能、同一业务，独立的功能和项目，多组件组成模块，多模块组成业务框架

Vue组件：页面组件、UI组件、基础业务组件
prop,自定义事件,slot是组成组件的三个重要因素。
prop用于定义组件的属性。
和prop不同，$refs 着重与索引，主要用于调用子组件里面的属性和方法
自定义事件用于触发组件的事件。
slot用于组件功能的扩展。

有空看看$attrs 和$listeners 
Bus，初始化全局事件总线：
新建bus.js，引入vue，new vue 挂载到vue原型上。
要用的地方，引入bus.js即可
组件自调用
组件component install

# Git


# 冒泡
# 快排
# 为什么0.1 + 0.2  !=  0.3 ? 如何解决该问题
实际上计算的是这两个数字在计算机里所存储的二进制，0.1 和 0.2 在转换为二进制表示的时候会出现位数无限循环的情况。

js 中是以 64 位双精度格式来存储数字的，只有 53 位的有效数字，超过这个长度的位数会被截取掉这样就造成了精度丢失的问题。这是第一个会造成精度丢失的地方。

在对两个以 64 位双精度格式的数据进行计算的时候，首先会进行对阶的处理，对阶指的是将阶码对齐，也就是将小数点的位置对齐后，再进行计算，一般是小阶向大阶对齐，因此小阶的数在对齐的过程中，有效数字会向右移动，移动后超过有效位数的位会被截取掉，这是第二个可能会出现精度丢失的地方。

当两个数据阶码对齐后，进行相加运算后，得到的结果可能会超过 53 位有效数字，因此超过的位数也会被截取掉，这是可能发生精度丢失的第三个地方。

怎么解决？
（1）转换为整数
（2）将两个数相加的结果和右边相减，如果相减的结果小于一个极小数，那么我们就可以认定结果是相等的，这个极小数可以使用 es6 的 Number.EPSILON

# 防抖
	持续触发一个事件，在一定时间内不触发，使用最后一次
	防止函数多次调用，使用最后一次调用

	常用于input输入，频繁关键词输入，请求频次会太多，会在保证停止输入1s后再去请求	

	// 防抖
	function debounce(fn, wait) {    
		var timeout = null;    
		return function() {        
			if(timeout !== null)   clearTimeout(timeout);        
			timeout = setTimeout(fn, wait);    
		}
	}
	// 处理函数
	function handle() {    
		console.log(Math.random()); 
	}
	// 滚动事件
	window.addEventListener('scroll', debounce(handle, 1000));

# 节流
	持续触发一个事件，每固定时间触发一次，平滑响应
	防止函数多次调用，定时触发函数

	常用于resize、scroll事件，是一定要执行的

	function throttle(fn, interval) {
		let last = 0;
		return function() {
			let now = Date.now();
			if (now - last >= interval) {
				last = now;
				fn.apply(this, arguments);
			}
		}
	}
	时间戳写法会造成第一次立即执行

	改为定时器写法，但是最后一次会延时执行
	function throttle(fn, interval) {
		let timer = null;
		return funtion() {
			let context = this;
			let args = arguments;
			if(!timer) {
				timer = setTimeout(function() {
					fn.apply(context, args);
					timer = null;
				}, interval)
			}
		}
	}

	结合写法
	function throttle (fn, delay) {
		let timer = null;
		let startTime = Date.now();
		reurn function() {
			let curTime = Date.now();
			let leftTime = delay - (curTime - startTime);
			let context = this;
			let args = arguments;
			clearTimeout(timer);
			if (leftTime <= 0) { // 保证最后一次立即执行
				fn.apply(context, args);
				startTime = Date.now();
			} else { // 说明时间间隔短，定时后执行
				timer = setTimeout(fn, leftTime)
			}
		}
	}

# 垃圾回收
	js的内存管理是自动执行，不可见。

	js引擎有一个后台进程，叫垃圾回收器，监视所有对象，并删除那些不可访问的对象。

		如一个变量，指向一个对象。这个变量重新赋值，对象没有了对它的引用，垃圾回收器就会回收并释放内存。
	
	垃圾：
		一般来说，指没有被引用的对象
	如何检垃圾
		通过一种算法 标记-清除算法

		1.标记清除：函数中申明变量（进入环境）, 函数执行结束（离开环境），垃圾回收器会删除没有引用的变量。
		2.引用计数：引用计数的策略是跟踪记录每个值被使用的次数。变量引用次数为0的空间会被清理。
# 性能优化
用性能评估工具：
	PageSpeed
	Yslow：雅虎发布，为firefox、chrome、opera、safari插件
	F12的timeline/profile功能
1. css优化
	移除空css、避免嵌套过深、减少代码量；
	合并多个css，减少请求
	css sprites合并多图，通过background属性设置图片
2. js优化
	Dom优化
		一次性加入dom
		使用委托批量绑定
		class，少用style操作样式减少重排reflow
	节流防抖
	图片懒加载、动态加载
	闭包删除不必要局部变量

3. 网络优化
	公用文件http缓存优化
	减少HTTP请求数量；
	尽量用localstorage代替cookie
	CDN托管静态文件
	开启Gzip压缩

总的：
	最小化关键字节数，减少下载时间
	最小化关键资源数，消除内联、推迟下载或异步解析等。
	优化加载资源顺序，让关键资源尽早下载

	浏览器渲染页面，谷歌翻译：css放head，js放body，js异步加载async、defer
	减少http请求：
		css js 合并打包
		小图标用iconfont代替
		复杂图片使用base64格式的图片
	减少静态资源的体积
		压缩静态资源，gulp、webpack，个别图片有一个网站可以在线压缩
		高效率css，防止css预处理器滥用，嵌套冗余
		服务端开启gzip压缩


# 盒子模型
	width	padding	border	margin

	IE怪异模式
	content包括width、padding、border

	box-sizing: content-box / border-box(IE)
# IE内核
	trident

# 对象和字符串的互相转换
字符串转对象 3方式：
	JSON.parse(str)
	eval("("+str+")")
	(new Function("return " + str))()

# for 一类的区别？  效率最快是？

# 单点登录

# jsonp只能get？
jsonp的实现是通过script可跨域的特性实现
根据script标签src属性指定请求路径去请求，显然是get方式

# promise
promise对象是异步编程的一种解决方案，主要能解决回调地狱（return）
Promise是一个构造函数，接收一个函数作为参数，函数中resolve和reject参数，返回一个Promise实例。

一个Promise实例有三种状态，分别是pending、resolved和rejected，分别代表进行中、已成功和已失败。
	状态改变是单向的，实例的状态只能由pending转变为resolved 或者 rejected 状态，一经改变，状态就永久变化。
    状态是通过resolve() 和 reject() 函数来实现的。
Promise是立即执行函数，创建既执行。
	在实例的时候就已经执行了
    
在Promise对象的原型上有个then方法，该方法会为Promise对象的注册回调函数。
	这个回调函数属于微任务，会在本轮事件循环的末尾执行


promise.all
	数组里面不一定都是promise
	所有promise执行完成后返回结果
	如果有一个报错，会catch返回reject，但其他promise还是已经执行了，因为在创建实例化的时候已经执行了

function PromiseAll(arr) {
	return new Promise((resolve, reject) => {
		if(!Array.isArray(arr)) {
			return reject(new Error('传入的参数必须是数组'))
		}
		const res = [];
		const num = arr.length;
		let counter = 0;
		
		for (let i = 0; i < num; i++) {
			// 可以判断Object.prototype.toString.call(arr[i]) === '[object Promise]'，是不promise
			// 实际上resolve可以直接将不是promise的数据包装为promise
			Promise.resolve(arr[i]).then(value => {
				counter++;
				res[i] = value; // 保证res输出对应顺序

				if (counter === num) { // 不能用res.length判断，因为有可能最后一个promise先执行完成，会使res的长度直接到num
					resolve(res);
				}
			}).catch(e => reject(e))
		}
	})
}

Promise.race同样并行异步，只是谁跑的快，以谁为准执行回调

promise缓存
const cacheMap = new Map(); // 有缓存需要时效，可自己加上
function enableCache(target, name, descriptor) {
	const val = descriptor.value;
	descriptor.value = async function(...args) {
		const cacheKey = name + JSON.stringify(args);
		if (!cacheMap.get(cacheKey)) {
			const cacheValue = Promise.resolve(val.apply(this, args)).catch(_ => {
				cacheMap.set(cacheKey, null);
			})
			cacheMap.set(cacheKey, cacheValue)
		}
		return cacheMap.get(cacheKey);
	}
	return descriptor;
}

class PromiseClass {
	// 在需要装饰的函数上写上，调用getInfo，会将结果存储上
	@enableCache
	static async getInfo() {}
}
PromseClass.getInfo(); // 第一次没有缓存，需要请求
PromseClass.getInfo();




-----------------css---------------------
# 选择器
标签选择器
类选择器 0.0.1.0
属性选择器 0.0.1.0
	[target] [target=_blank] 
	[title~=flower]选择标题属性包含单词flower的所有元素
ID选择器 0.1.0.0
通用选择器*

!important > 内联(1.0.0.0) > id(0.1.0.0) > 类、属性、伪类(0.0.1.0) > 元素、伪元素(0.0.0.1) > 通配符(0.0.0.0)

# BFC
块级格式化上下文,是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，不影响外部区域。

文档流其实分为普通流、定位流和浮动流和三种，普通流其实就是指BFC中的FC，也即格式化上下文。
一个页面是由很多个 Box 组成的，不同类型的 Box， 会参与不同的 Formatting Context。
	最常见的 Formatting context 有 Block fomatting context (简称BFC)和 Inline formatting context (简称IFC)。
普通流：元素按照其在 HTML 中的先后位置从上到下、从左到右布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行


BFC的布局规则
	内部的Box会在垂直方向，一个接一个地放置。

	Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。

	每个盒子（块盒与行盒）的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。

	BFC的区域不会与float box重叠。

	BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。

	计算BFC的高度时，浮动元素也参与计算。

如何触发创建BFC
	float的值不是none。
	position的值不是static或者relative。
	display的值是inline-block、table-cell、flex、table-caption或者inline-flex
	overflow的值不是visible

使用：
	避免margin重叠
		p { margin: 30px;}
		<p>11111111111</p>
		<p>2222222222</p>
		将第二个p用div包起来，激活为一个BFC
		<p>11111111111</p>
		<div style="overflow:hidden">
			<p>2222222222</p>
		</div>
	float: BFC区域不会与float重叠
		.left { float: left; width: 150px; } 
		.right { overflow:hidden; } 自适应宽
	清除浮动
		不给父节点设置高度，子节点设置浮动的时候（float脱离了文档流），会发生高度塌陷
			给父节点清除浮动



# html5 css3 新特性
html5新特性：
	拖放API (drag, drop)
	语义化更好的标签内容(header, nav, footer, aside, article, section)
	音频视频API (audio, video)
	画布API (canvas)
	地理位置API (Geolocation)
	本地离线存储 (localStorage)
	会话存储 (sessionStorage)
	表单控件 (calendar, date, time, email, url, search)
	新技术 (webworker, websocket)

	移除了
		纯表现的元素：basefont、big、center、font、 s、strike、tt、u
		对可用性产生负面影响的元素：frame、frameset、noframes
css3新特性：
	圆角 (border-radius)
	阴影 (box-shadow)
	文字特效 (text-shadow)
	线性渐变 (gradient)
	变换: 旋转、缩放、定位、倾斜 (tranform)
	更多CSS选择器 （子串匹配属性选择器Ele[attr^="value"]、普通兄弟选择器~）
	多背景图 (multiple background images)
	色彩模式 (rgba)
	伪元素 (::after, ::before)
	媒体查询 (@media)
	多栏布局 (multi-columns 、 flexible box 与 grid layouts)
	图片边框 (border-image)

# css选择器优先级
!important > inline > id > class > tag > * > inherit > default

	!important：大于其他
	行内：1000
	id选择器：100
	类，伪类和属性选择器，如.content：10
	类型选择器和伪元素选择器：1
	通配符、子选择器、相邻选择器：0
	同级别的后写的优先级高。

相同class样式，css中后写的优先级高，和html中的class名字前后无关

# viewport
<meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no" />
<!-- 
    width    设置viewport宽度，为一个正整数，或字符串‘device-width’
    device-width  设备宽度
    height   设置viewport高度，一般设置了宽度，会自动解析出高度，可以不用设置
    initial-scale    默认缩放比例（初始缩放比例），为一个数字，可以带小数
    minimum-scale    允许用户最小缩放比例，为一个数字，可以带小数
    maximum-scale    允许用户最大缩放比例，为一个数字，可以带小数
    user-scalable    是否允许手动缩放
-->
怎样处理 移动端 1px 被 渲染成 2px问题？
局部处理
	meta标签中的 viewport属性 ，initial-scale 设置为 1
	rem按照设计稿标准走，外加利用transfrome 的scale(0.5) 缩小一倍即可；
全局处理
	mate标签中的 viewport属性 ，initial-scale 设置为 0.5
	rem 按照设计稿标准走即可

# 移除inline-block间隙
移除空格
使用margin负值
使用font-size:0
letter-spacing
word-spacing

# （外）边距重叠
布局垂直方向上两个元素的间距不等于margin的和，而是取较大的一个

- 同级相邻元素
现象：上方元素设置margin-bottom: 20px，下方元素设置margin-top: 10px，实际的间隔是20px 
避免办法：同级元素不要同时设置，可都设置margin-bottom或margin-top的一个，或者设置padding

- 父子元素
现象：父元素设置margin-top: 20px，下方元素设置margin-top: 10px，实际的间隔是20px 
避免办法：父元素有padding-top，或者border-top。或者触发BFC

# css 实现一个三角形
利用了元素边框连接处的等分原理
.triggle {
	width: 0; height:0;
	border-width: 100px;
	border-style: solid;
	border-color: tomato transparent transparent transparent;
}

从而是个200*200的盒子

# css 三栏布局
（1）绝对定位+margin
.outer {  position: relative;  height: 100px;}
.left {  position: absolute;  width: 100px;  height: 100px; background: tomato;} 宽100
.right {  position: absolute;  top: 0;  right: 0;  width: 200px;  height: 100px;  // 添加个颜色显示  background: gold;}宽200
.center {  margin-left: 100px;  margin-right: 200px;  height: 100px;  background: lightgreen;}左距100右距200

（2）Flex
.outer {  display: flex;  height: 100px;}
.left {  flex: 0 0 100px;  background: tomato;}宽100
.right {  flex: 0 0 200px; background: gold;}宽200
.center {  flex: auto;  background: lightgreen;}左距100右距200

（3）Float+margin
.outer {  height: 100px;}
.left {  float: left;  width: 100px;  height: 100px;}
.right {  float: right;  width: 200px;  height: 100px;}
.center {  margin-left: 100px;  margin-right: 200px;  height: 100px;}

（4）圣杯布局
.outer {  padding-left: 100px;  padding-right: 200px;  height: 100px;}
.left {  position: relative;  left: -100px;  float: left;  margin-left: -100%;  width: 100px;  height: 100px;}
.right {  position: relative;  left: 200px;  float: right;  margin-left: -200px;  width: 200px;  height: 100px;}
.center {  float: left;  width: 100%;  height: 100px;  background: lightgreen;}


（5）双飞翼布局??
.outer {  height: 100px;}
.left {  float: left;  margin-left: -100%;  width: 100px;  height: 100px;}
.right {  float: left;  margin-left: -200px;  width: 200px;  height: 100px;}
.wrapper {  float: left;  width: 100%;  height: 100px;  background: lightgreen;  // sass嵌套体现结构  .center {    margin-left: 100px;    margin-right: 200px;    height: 100px;  }}


# flex
弹性布局，Flex 布局将成为未来布局的首选方案。 兼容性：
	Webkit 内核的浏览器，必须加上-webkit前缀。
	ie9不支持

用 Flex 布局的元素，称为 Flex 容器（flex container），简称"容器"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称"项目"。

主轴&交叉轴：堆叠的方向，默认主轴是水平方向，交叉轴是垂直方向。可通过flex-derection: column设置主轴为垂直方向。

容器属性：
	display: flex
	flex-direction：主轴的方向（即项目的排列方向），row | row-reverse | column | column-reverse;
	flex-wrap：是否换行，nowrap | wrap | wrap-reverse;
	flex-flow：direction 和 wrap简写
	justify-content：主轴对齐方式，flex-start | flex-end | center | space-between | space-around;
	align-items：交叉轴对齐方式，flex-start | flex-end | center | baseline | stretch;
	align-content: 多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。flex-start | flex-end | center | space-between | space-around | stretch;

项目的属性:
	order：项目的排列顺序，数值越小，排列越靠前，默认为0。

	flex-grow：放大比例，默认为0，指定元素分到的剩余空间的比例。

	flex-shrink：缩小比例，默认为1，指定元素分到的缩减空间的比例。

	flex-basis：分配多余空间之前，项目占据的主轴空间，默认值为auto

	flex：grow, shrink 和 basis的简写，默认值为0 1 auto

	align-self：单个项目不一样的对齐方式，默认值为auto，auto | flex-start | flex-end | center | baseline | stretch;

# 如何解决不同浏览器的标签默认的margin值和padding值得不同？
直接重置默认样式
body,h1,h2,h3,ul,li,input,div,span,a,form .... {
  margin: 0;  padding: 0;
}
// 或者使用通配符*
* {  margin: 0;  padding: 0;}


(1)CSS中transition和animation的区别是什么？
transition的值是简写，扩展开依次是：
	transition-property：过渡属性
	transition-duration：过渡时间长度
	transition-delay：延迟几秒执行
	transition-timing-function
	linear：匀速
	ease-in：加速
	ease-out：减速
	cubic-bezier函数：自定义速度模式，最后那个cubic-bezier

	transition: 1s height cubic-bezier(.83,.97,.05,1.44);

transition 是过渡，是样式值的变化的过程；animation 是动画也叫关键帧，通过和 keyframe 结合可以设置中间帧的状态；
transition 需要通过用户或者js来配合触发，animation 配合 @keyframe 可以直接播放，不需用户触发；
animation 可以设置更多的属性，比如循环次数，动画结束的状态等等；
animation 可以结合 keyframe 设置每一帧的状态，但是 transition 只能设置开始和结束的状态；
(2)防抖和节流有什么区别？如何实现？
防抖是频繁触发的情况下，只有足够的空闲时间才执行代码一次。
节流是指一定时间内js方法只执行一次。
防抖需要一个延时器来辅助实现，延迟执行需要执行的代码，如果方法多次触发，把上次记录的延迟执行代码用clearTimeout清除，重新开始计时，如果计时完毕则执行代码。
节流是声明一个变量当标志位，记录当前代码是否执行，如果正在执行，取消这次方法执行直接返回，如果空闲则正常触发方法执行。
(3)如何实现深度优先遍历和广度优先遍历？
深度优先遍历是从某个顶点出发，首先访问这个顶点，然后找出刚访问这个结点的第一个未被访问的邻结点，然后再以此邻结点为顶点，继续找它的下一个顶点进行访问。重复此步骤，直至所有结点都被访问完为止。
广度优先遍历是从某个顶点出发，首先访问这个顶点，然后找出刚访问这个结点所有未被访问的邻结点，访问完后再访问这些结点中第一个邻结点的所有结点，重复此方法，直到所有结点都被访问完为止。
(4)简述Vue父子组件加载渲染和子组件更新两种生命周期的执行顺序。
父子组件加载渲染过程：
父组件beforeCreate -> 父组件created -> 父组件beforeMount -> 子组件beforeCreate -> 子组件created -> 子组件beforeMount -> 子组件mounted -> 父组件mounted
子组件更新过程
父组件beforeUpdate -> 子组件beforeUpdate -> 子组件updated -> 父组件updated


https://blog.csdn.net/melody_day/article/details/53510554

https://www.cnblogs.com/jwen1994/p/10409811.html

https://blog.csdn.net/imagine_tion/article/details/108951488
